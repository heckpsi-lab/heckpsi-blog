<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HeckPsi Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.heckpsi.com/"/>
  <updated>2016-06-21T12:55:48.000Z</updated>
  <id>http://blog.heckpsi.com/</id>
  
  <author>
    <name>上海骇咕赛信息科技有限公司</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>围绕 MacBook Pro 打造的工作站设计日志</title>
    <link href="http://blog.heckpsi.com/2016/06/21/workstation-setup-guide/"/>
    <id>http://blog.heckpsi.com/2016/06/21/workstation-setup-guide/</id>
    <published>2016-06-21T12:41:31.000Z</published>
    <updated>2016-06-21T12:55:48.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;为什么&quot;&gt;&lt;a href=&quot;#为什么&quot; class=&quot;headerlink&quot; title=&quot;为什么&quot;&gt;&lt;/a&gt;为什么&lt;/h3&gt;&lt;h4 id=&quot;为什么我一定要用-macOS？&quot;&gt;&lt;a href=&quot;#为什么我一定要用-macOS？&quot; class=&quot;headerlink&quot; title=&quot;为什么我一定要用 macOS？&quot;&gt;&lt;/a&gt;为什么我一定要用 macOS？&lt;/h4&gt;&lt;p&gt;这个问题需要放在一上来就被解释清楚，尤其当你发现这个 setup 的性价比其实非常低。然而这么设计自然有它存在的意义。首先，这和我的工作性质有关。我的日常开发同时涉及后端、前端和设计。尤其是我的后端围绕着 Ruby 展开。Ruby 的 native extensions 在 Windows 上不免没有那么好用，甚至在兼容性上有一些问题。使用一个 POSIX 兼容的操作系统是非常必要的。然而涉及前端的用户界面设计时，我还需要用到 Illustrator、Photoshop、Sketch 等一些软件。哪怕不使用 Sketch，剩下的软件也没有 Linux 的兼容版本。这使得 macOS 是我能避免频繁切换操作系统的唯一选择。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;为什么不使用台式机的选项？&quot;&gt;&lt;a href=&quot;#为什么不使用台式机的选项？&quot; class=&quot;headerlink&quot; title=&quot;为什么不使用台式机的选项？&quot;&gt;&lt;/a&gt;为什么不使用台式机的选项？&lt;/h4&gt;&lt;p&gt;在组建这个工作站系统的一开始，我希望围绕一款苹果的台式机来开始。苹果目前仍然在销售的台式机有 Mac Mini、Mac Pro 和 iMac，其中 iMac 带一块 27 寸的 5K 屏幕。但是 Mac Mini 和 iMac 本质上使用的仍然是移动级别的 CPU。而 Mac Pro 由于长久没有更新，目前的购买选项性价实在太差，并且 Mac Pro 的风道虽然设计非常合理，但是很多使用经验表明，数个月后当灰尘覆盖底部后风道会收到极严重的影响，故不作考虑。&lt;/p&gt;
&lt;h3 id=&quot;如何&quot;&gt;&lt;a href=&quot;#如何&quot; class=&quot;headerlink&quot; title=&quot;如何&quot;&gt;&lt;/a&gt;如何&lt;/h3&gt;&lt;h4 id=&quot;屏幕设置&quot;&gt;&lt;a href=&quot;#屏幕设置&quot; class=&quot;headerlink&quot; title=&quot;屏幕设置&quot;&gt;&lt;/a&gt;屏幕设置&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://cdn.heckpsi.com/screen-setup.jpg&quot; alt=&quot;Screen Setup&quot;&gt;&lt;/p&gt;
&lt;p&gt;中间是 34 英寸 21:9 带鱼屏幕，用来做视频剪辑等素材复杂的工作时能很好胜任。写代码时也能同时照顾多个文件。右侧 24 英寸 16:9 屏幕竖放，用于看适合竖着看的内容，比如开发文档、论文，不看的时候把聊天窗口丢在右侧避免对主要工作视线的干扰。上方 23 英寸 16:9 屏幕，用于连接 PC，用于偶尔需要看的 Visual Studio 上的项目，或者玩一些 PC 独占的游戏等。&lt;/p&gt;
&lt;p&gt;这里我使用了 Synergy 软件，来给两台电脑共享键盘和鼠标。由于 Synergy 跨平台支持，只要简单配置屏幕的位置，就能提供鼠标、键盘和剪贴板的双机共享了。&lt;/p&gt;
&lt;h4 id=&quot;性能&quot;&gt;&lt;a href=&quot;#性能&quot; class=&quot;headerlink&quot; title=&quot;性能&quot;&gt;&lt;/a&gt;性能&lt;/h4&gt;&lt;p&gt;当两块高分辨率的屏幕插入 MacBook Pro 后，你能看到显著的性能下滑，发热非常明显。如果试图利用 21:9 屏幕的优势玩一些 macOS 系统兼容的游戏比如 欧洲卡车模拟器 的时候哪怕在全低画质下也不能流畅运行。如果跑视频渲染、压片等操作时，同样的性能问题明显。相反在一些 CPU 密集的应用场景下，比如编译程序的时候，反而没有太大的问题。而内存上，16GB 也基本够使用，虽然如果是 32GB 或者 64GB 的配置的话，性能上更游刃有余一些。&lt;/p&gt;
&lt;p&gt;综上我们可以发现，主要问题出在 MacBook Pro 的显卡上。那么想到的方案自然就是外置显卡。不过，凡是做过 expressCard 外置显卡的人都知道，对显卡性能的损失是非常严重的。这是因为 expressCard 虽然是总线接口，但是其带宽只有 PCI-E x1。然而 MacBook Pro 所提供的雷电接口，在 Thunderbolt 2.0 协议下就有 20Gbps 的带宽，这相当于 PCI-E x4 的带宽，哪怕使用 GTX 970 这样的显卡，也只有 10% 的性能损失。&lt;/p&gt;
&lt;p&gt;我使用的外置 PCI-E 盒子是 AKiTiO 的产品。外包装上明显标注，不支持显卡。这是因为显卡需要额外的供电，而盒子只能提供 60W 的供电，远小于显卡的需求，直接插上用可能会把显卡烧坏。所以我们将显卡盒外壳拆开后，单独接一个 400W 电源到显卡的 8pin 上。只不过，只这么操作，电源并不会认为自己开机了，所以不会供电。我们还需要用回形针把电源 24pin 的 13 引脚短接到地线，来模拟一个开机的情况。在我用了一天后，我发现 Dell 曾经为他们的迷你电脑推出过一款电源，其输出正是 12V 的 8pin，并且功率高达 220W，这是 Dell DA-2 电源适配器。所以如果不想魔改电源的话，可以使用这一解决方案。&lt;/p&gt;
&lt;p&gt;驱动上的话，NVIDIA 只为 Mac Pro 推出过显卡驱动，而不是 MacBook Pro。当然，操作系统层面的事情，当然我们可以魔改驱动，有一个一键安装的脚本项目在此 &lt;a href=&quot;https://github.com/goalque/automate-eGPU&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;automate-eGPU&lt;/a&gt;。不过由于新的 Mac 的安全策略，你还需要 Command + R 开机进入恢复模式，在实用工具-终端中输入命令关闭驱动签名校验，才能正常使用，这一点这个一键脚本也会做出相应的提示。&lt;/p&gt;
&lt;p&gt;至此，我们解决了显卡性能上的问题。&lt;/p&gt;
&lt;h4 id=&quot;存储&quot;&gt;&lt;a href=&quot;#存储&quot; class=&quot;headerlink&quot; title=&quot;存储&quot;&gt;&lt;/a&gt;存储&lt;/h4&gt;&lt;p&gt;买 256GB 版本 MacBook Pro 省下来的钱就是脑袋里进的水。为了解决把笔记本变为工作站后增加的大量数据，不得不寻找外置的存储方案进行妥协。最常见的解决方案当然就是移动硬盘。但事实上，移动硬盘通过 USB 3.0 连接，经常容易发生连接不稳定的情况，从而导致一些存储意外发生，我曾因这些原因导致过数据丢失一次。直到我见到了 Transcend 的 256GB 扩容存储卡，其长度比一般卡还要短一些，插入 MacBook Pro 中能几乎贴合于卡槽，从而避免了携带和使用上的不安全。唯一麻烦的是拿出来的时候需要使用一把面包刀或者尖锐的支架才能让卡与机器分离。&lt;/p&gt;
&lt;h4 id=&quot;噪音&quot;&gt;&lt;a href=&quot;#噪音&quot; class=&quot;headerlink&quot; title=&quot;噪音&quot;&gt;&lt;/a&gt;噪音&lt;/h4&gt;&lt;p&gt;虽然我们把显卡外置了，理论上机器散热没有任何压力。但实际上，Thunderbolt 2 的连接处由于非常巨大的数据交换，实际上左侧发热相对还是有点严重。考虑到，MacBook Pro 不止通过风道具有很强的散热能力，其铝合金外壳本身也被设计成其散热的一部分，我们大可通过降低外壳温度来降低整体温度。我选择了目前还只有在日本市场销售的 USB 水冷套件，为我的 MacBook Pro 做进一步降温。&lt;/p&gt;
&lt;h4 id=&quot;外设&quot;&gt;&lt;a href=&quot;#外设&quot; class=&quot;headerlink&quot; title=&quot;外设&quot;&gt;&lt;/a&gt;外设&lt;/h4&gt;&lt;p&gt;关于键盘，不多说，参考之前的文章&lt;a href=&quot;http://blog.heckpsi.com/2016/05/14/customized-machanical-keyboard/&quot;&gt;《一款祖传的机械键盘》&lt;/a&gt;。在我使用的那么多的鼠标中，没有一款鼠标能比 Logitech M558 更适合 Mac 了，说实话 Apple Magic Mouse 还是省省吧，那东西就是个能挪动的触摸板。M558 从设计到重量甚至是电池，简直就是天生为 MacBook 准备的。而且，很便宜，并不是 Logitech 的高端产品。&lt;/p&gt;
&lt;h4 id=&quot;便携&quot;&gt;&lt;a href=&quot;#便携&quot; class=&quot;headerlink&quot; title=&quot;便携&quot;&gt;&lt;/a&gt;便携&lt;/h4&gt;&lt;p&gt;虽然我们对整个 setup 进行了巨大的改动。但是其便携性没有遭到下降。我只需要关机后断开先开连接，就能带出门。而我的数据、执行了一半的工作流都能随身携带。续航也能维持在 8 - 9 小时的 MacBook Pro 的正常续航水平，而选择的 60% 键盘和 Logitech M558 也都很适合携带。这是单独搭建的工作站无法得到的优秀体验。&lt;/p&gt;
&lt;h3 id=&quot;购物列表&quot;&gt;&lt;a href=&quot;#购物列表&quot; class=&quot;headerlink&quot; title=&quot;购物列表&quot;&gt;&lt;/a&gt;购物列表&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选项&lt;/th&gt;
&lt;th&gt;价格（人民币元）&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;MacBook Pro 15’’&lt;/td&gt;
&lt;td&gt;14288&lt;/td&gt;
&lt;td&gt;国行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Transcent JetDrive Lite 256GB&lt;/td&gt;
&lt;td&gt;1099&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x86 兼容机&lt;/td&gt;
&lt;td&gt;5000&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AOC Q3477FQ&lt;/td&gt;
&lt;td&gt;2399&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AKiTiO Thunderbolt 2 PCI-E&lt;/td&gt;
&lt;td&gt;1200&lt;/td&gt;
&lt;td&gt;二手&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NVIDIA GTX 970 ITX&lt;/td&gt;
&lt;td&gt;1700&lt;/td&gt;
&lt;td&gt;二手&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dell DA-2 Adapter&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;二手&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ViewSonic VA2462H&lt;/td&gt;
&lt;td&gt;899&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ViewSonic VA2349S&lt;/td&gt;
&lt;td&gt;699&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;乐歌 D3 显示器支架&lt;/td&gt;
&lt;td&gt;199&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;乐歌 L1 显示器支架&lt;/td&gt;
&lt;td&gt;79&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logitech M558&lt;/td&gt;
&lt;td&gt;169&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;客制化机械键盘&lt;/td&gt;
&lt;td&gt;1290&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;笔记本水冷套价 USBWATC2&lt;/td&gt;
&lt;td&gt;583.73&lt;/td&gt;
&lt;td&gt;日本 Amazon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;总计&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;29604.73&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;缺点&quot;&gt;&lt;a href=&quot;#缺点&quot; class=&quot;headerlink&quot; title=&quot;缺点&quot;&gt;&lt;/a&gt;缺点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;当 CPU 和内存遇到了瓶颈&lt;/strong&gt;：由于使用的是移动的 CPU 和内存，虽然都算不错，但在一些任务上依然会遇到瓶颈，比如机器学习或者大型编译。于是我在房间里准备了一台 22 核 44 线程 64GB 内存的服务器，让 Mac 可以随时随地远程登录来执行这部分任务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置的屏幕无法关闭&lt;/strong&gt;：当系统默认显卡切换为 GTX 970 时，把屏幕盖子盖上后，虽然屏幕已不作显示，但操作系统仍然认为该屏幕存在并耗费资源进行渲染。这可以被认为是 macOS 的一个 bug。暂时没有解决方案。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Synergy 在多屏下检测有误&lt;/strong&gt;：Synergy 跨机器的检测逻辑是你达到了屏幕的边缘，而这个边缘是指你最边缘的那块屏幕的边缘。比如我的设置中，我无法向 Synergy 正确描述我 PC 的位置。从而不能使得跨机器的使用完全符合直觉。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;音频&lt;/strong&gt;：由于盖上盖子的 MacBook Pro 发出的声音很奇怪会破音。而几块屏幕的声音几乎就是只能用「听个响」来形容，所以需要外接一个音响。同时 PC 和 MacBook Pro 的音频不能在同一个音响输出。我试图使用 3.5mm音频线一分二母 立体声音频转接线，但实际上还存在一点问题，仍然在解决中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;以后的搭建&quot;&gt;&lt;a href=&quot;#以后的搭建&quot; class=&quot;headerlink&quot; title=&quot;以后的搭建&quot;&gt;&lt;/a&gt;以后的搭建&lt;/h3&gt;&lt;p&gt;由于这些都是在我卧室床头搭建的，以满足我起床就能写代码，写累了就睡的要求。当然我还购买了一把没有腿的椅子，这样我能长时间坐在床上而不至于腰背疼痛。那么既然是卧室，还需要点娱乐设施。所以打算把窗帘拆了改装成投影幕，加装投影仪供 PS4 使用，在 120 英寸的屏幕上畅玩 PS4。目前仍然在筹划中，如果搭建完了，会给大家分享相关的日志。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;为什么&quot;&gt;&lt;a href=&quot;#为什么&quot; class=&quot;headerlink&quot; title=&quot;为什么&quot;&gt;&lt;/a&gt;为什么&lt;/h3&gt;&lt;h4 id=&quot;为什么我一定要用-macOS？&quot;&gt;&lt;a href=&quot;#为什么我一定要用-macOS？&quot; class=&quot;headerlink&quot; title=&quot;为什么我一定要用 macOS？&quot;&gt;&lt;/a&gt;为什么我一定要用 macOS？&lt;/h4&gt;&lt;p&gt;这个问题需要放在一上来就被解释清楚，尤其当你发现这个 setup 的性价比其实非常低。然而这么设计自然有它存在的意义。首先，这和我的工作性质有关。我的日常开发同时涉及后端、前端和设计。尤其是我的后端围绕着 Ruby 展开。Ruby 的 native extensions 在 Windows 上不免没有那么好用，甚至在兼容性上有一些问题。使用一个 POSIX 兼容的操作系统是非常必要的。然而涉及前端的用户界面设计时，我还需要用到 Illustrator、Photoshop、Sketch 等一些软件。哪怕不使用 Sketch，剩下的软件也没有 Linux 的兼容版本。这使得 macOS 是我能避免频繁切换操作系统的唯一选择。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日志" scheme="http://blog.heckpsi.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>从零开始 Ruby on PHP</title>
    <link href="http://blog.heckpsi.com/2016/06/11/ruby-on-php-abc/"/>
    <id>http://blog.heckpsi.com/2016/06/11/ruby-on-php-abc/</id>
    <published>2016-06-10T22:54:40.000Z</published>
    <updated>2016-06-10T23:08:11.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;关于什叶派-PHP-教徒&quot;&gt;&lt;a href=&quot;#关于什叶派-PHP-教徒&quot; class=&quot;headerlink&quot; title=&quot;关于什叶派 PHP 教徒&quot;&gt;&lt;/a&gt;关于什叶派 PHP 教徒&lt;/h3&gt;&lt;p&gt;PHP 早期的设计意图下整个语言都是模板驱动的。也就是说主要就是写个静态页面，在适当的需要动态的场合插入一些短小的 CGI 代码。然而逊尼派 PHP 教徒确认为 PHP 可以变成一门大而全的语言，摇身一变，强行又是 MVC 又是 MVC 的。各种框架层出不穷，抄完 Spring 又抄 Rails，甚至在一门模板驱动的语言中再搞一个模板渲染引擎。简直是异教。&lt;/p&gt;
&lt;h3 id=&quot;Ruby-on-PHP&quot;&gt;&lt;a href=&quot;#Ruby-on-PHP&quot; class=&quot;headerlink&quot; title=&quot;Ruby on PHP&quot;&gt;&lt;/a&gt;Ruby on PHP&lt;/h3&gt;&lt;p&gt;考虑到 Ruby 是一门强大的支持元编程的语言。很容易地我们能够将 Ruby 写成一门以模板来驱动的 CGI 语言。通过几行代码&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;sinatra&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;get &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  redirect &lt;span class=&quot;string&quot;&gt;&#39;/index.php&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;get /^\/(.*?)\.php$/ &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;|c|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  erb c.to_sym&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;post /^\/(.*?)\.php$/ &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;|c|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  erb c.to_sym&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样，只需要在 &lt;code&gt;./view&lt;/code&gt; 下创建 erb 文件就可以当做 php 来写了，甚至连子目录都可以。&lt;br&gt;当然这样有一些小问题，比如，传进 erb 后连 request 来什么请求都不知道了。&lt;br&gt;所以我们可以稍作修改。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;sinatra&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;get &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  redirect &lt;span class=&quot;string&quot;&gt;&#39;/index.php&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;get /^\/(.*?)\.php$/ &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;|c|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  erb c.to_sym, &lt;span class=&quot;symbol&quot;&gt;locals:&lt;/span&gt; &amp;#123;&lt;span class=&quot;symbol&quot;&gt;request:&lt;/span&gt; request&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;post /^\/(.*?)\.php$/ &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;|c|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  erb c.to_sym, &lt;span class=&quot;symbol&quot;&gt;locals:&lt;/span&gt; &amp;#123;&lt;span class=&quot;symbol&quot;&gt;request:&lt;/span&gt; request&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样我们就有了一切 request 的数据了。自己在里面继续二次处理就是了。&lt;/p&gt;
&lt;h3 id=&quot;模板渲染&quot;&gt;&lt;a href=&quot;#模板渲染&quot; class=&quot;headerlink&quot; title=&quot;模板渲染&quot;&gt;&lt;/a&gt;模板渲染&lt;/h3&gt;&lt;p&gt;erb 模板是有趣的，但是像 PHP 那样一次性插十几行代码就不是很方便了。其实 erb 里也有这样的方法，只是 deprecated 而已。&lt;br&gt;&lt;figure class=&quot;highlight erb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;%&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    puts &lt;span class=&quot;string&quot;&gt;&#39;foo&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    puts &lt;span class=&quot;string&quot;&gt;&#39;bar&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然而问题来了，erb 里并不支持 echo 那样的命令。这样我们没法在一坨 Ruby 代码中输出某个东西到网页。&lt;br&gt;但是，Rails 里的 ActionView 不是支持 concat 吗？那么我们稍稍用点元编程的技巧，支持一下 echo 咯。&lt;br&gt;所以我们得到了最终代码&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# This is yet another PHP project&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;sinatra&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;action_view&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lookup_context = ActionView::LookupContext.new(&lt;span class=&quot;string&quot;&gt;&#39;./views&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lookup_context.cache = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; development?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;view_context = ActionView::Base.new(lookup_context)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ActionView::Helpers::TextHelper&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    output_buffer &amp;lt;&amp;lt; string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;get &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  redirect &lt;span class=&quot;string&quot;&gt;&#39;/index.php&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;get /^\/(.*?)\.php$/ &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;|c|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  view_context.render(&lt;span class=&quot;symbol&quot;&gt;file:&lt;/span&gt; c, &lt;span class=&quot;symbol&quot;&gt;locals:&lt;/span&gt; &amp;#123;&lt;span class=&quot;symbol&quot;&gt;request:&lt;/span&gt; request&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;post /^\/(.*?)\.php$/ &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;|c|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  view_context.render(&lt;span class=&quot;symbol&quot;&gt;file:&lt;/span&gt; c, &lt;span class=&quot;symbol&quot;&gt;locals:&lt;/span&gt; &amp;#123;&lt;span class=&quot;symbol&quot;&gt;request:&lt;/span&gt; request&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们也能在 erb 里愉快地 echo 了&lt;br&gt;&lt;figure class=&quot;highlight erb&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Proudly Powered By &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;br&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;%&lt;span class=&quot;ruby&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    echo &lt;span class=&quot;string&quot;&gt;&#39;PHP&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;副作用&quot;&gt;&lt;a href=&quot;#副作用&quot; class=&quot;headerlink&quot; title=&quot;副作用&quot;&gt;&lt;/a&gt;副作用&lt;/h3&gt;&lt;p&gt;根据上面的做法，我们把 Ruby 变成了一门什叶派 PHP 心目中 PHP 本该有的样子了。&lt;br&gt;顺便还带来了一点副作用那就是，Wappalyzer 把这个项目完全当做 PHP 项目了。&lt;br&gt;假如黑客试图用 PHP 的漏洞来攻击你，就等着看好戏吧。诶嘿~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于什叶派-PHP-教徒&quot;&gt;&lt;a href=&quot;#关于什叶派-PHP-教徒&quot; class=&quot;headerlink&quot; title=&quot;关于什叶派 PHP 教徒&quot;&gt;&lt;/a&gt;关于什叶派 PHP 教徒&lt;/h3&gt;&lt;p&gt;PHP 早期的设计意图下整个语言都是模板驱动的。也就是说主要就是写个静态页面，在适当的需要动态的场合插入一些短小的 CGI 代码。然而逊尼派 PHP 教徒确认为 PHP 可以变成一门大而全的语言，摇身一变，强行又是 MVC 又是 MVC 的。各种框架层出不穷，抄完 Spring 又抄 Rails，甚至在一门模板驱动的语言中再搞一个模板渲染引擎。简直是异教。&lt;/p&gt;
&lt;h3 id=&quot;Ruby-on-PHP&quot;&gt;&lt;a href=&quot;#Ruby-on-PHP&quot; class=&quot;headerlink&quot; title=&quot;Ruby on PHP&quot;&gt;&lt;/a&gt;Ruby on PHP&lt;/h3&gt;&lt;p&gt;考虑到 Ruby 是一门强大的支持元编程的语言。很容易地我们能够将 Ruby 写成一门以模板来驱动的 CGI 语言。通过几行代码&lt;/p&gt;
    
    </summary>
    
    
      <category term="Ruby" scheme="http://blog.heckpsi.com/tags/Ruby/"/>
    
      <category term="PHP" scheme="http://blog.heckpsi.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Google 的终极目标是天网</title>
    <link href="http://blog.heckpsi.com/2016/05/19/google-io-2016-review/"/>
    <id>http://blog.heckpsi.com/2016/05/19/google-io-2016-review/</id>
    <published>2016-05-19T13:19:17.000Z</published>
    <updated>2016-05-19T13:30:52.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;引&quot;&gt;&lt;a href=&quot;#引&quot; class=&quot;headerlink&quot; title=&quot;引&quot;&gt;&lt;/a&gt;引&lt;/h3&gt;&lt;p&gt;Google I/O 2016 的 Keynote 部分结束后，各大媒体总会开始进行报道。然而作为一项面向开发者的活动，一般媒体都将其当作产品发布会来报道，以至于通篇流水账，完全不知所云。我今年是在桂林路的 GDG Shanghai Launchpad 和许多人一起观看了 Google I/O 2016 的直播。报名人数远超预期，导致场馆拥挤不堪，说实话，我甚至只能看半个屏幕。好在我英语听力水平不次，回来又看了一遍重播，对于 Google 在这次 Keynote 中想表达的大概有了清晰的认识。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Google-的机器学习能力有多深？&quot;&gt;&lt;a href=&quot;#Google-的机器学习能力有多深？&quot; class=&quot;headerlink&quot; title=&quot;Google 的机器学习能力有多深？&quot;&gt;&lt;/a&gt;Google 的机器学习能力有多深？&lt;/h3&gt;&lt;p&gt;Google 在这次会议上确实是以「产品」作为支撑发布会结构的。但是 Google Home, Google Assistant, Allo 再到 SyntaxNet，Google 在试图表达的重要观点是他们在机器学习，特别是自然语义处理（Netural Language Processing, NLP）上绝对过人的天赋。&lt;/p&gt;
&lt;p&gt;要说人工智能，不得不提到 Allan Turing 在 1950 年发表的论文&lt;a href=&quot;http://loebner.net/Prizef/TuringArticle.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;「COMPUTING MACHINERY AND INTELLIGENCE」&lt;/a&gt;，机器计算和智能。在这篇论文中，Allan Turing 革命性提出了 &lt;strong&gt;人工智能&lt;/strong&gt; 的判断标准，也就是所谓 &lt;strong&gt;图灵测试&lt;/strong&gt;。在这篇论文中，图灵特意举出了一些机器在做智能时需要克服的点，尤其是机器需要对上下文拥有智能。&lt;/p&gt;
&lt;p&gt;Google Now 的进化版本，Google Assistant 就拥有上下文的智能。你可以先问「这附近有什么好吃的意大利菜吗？」「能预定后天去这家餐厅吗？」「能告诉 Allen 一起来吗？」Google Assistant 具有理解上下文的能力，所以它知道你说的这家餐厅是上文中由 Google 推荐的意大利菜餐厅，以及你希望通知给 Allan 的是你想约他去这家餐厅在后天吃饭的事情。这就是不可多得的上下文理解能力，它并不是受限于实际规定好的语音助手对话的思路，而是完全基于其对自然语义的理解。&lt;/p&gt;
&lt;p&gt;拥有了对上下文理解的神奇能力，Google 自然可以做更多。除了终端形态的 Google Home 以外，Allo 其实是 Google Assistant 的进阶产品。有些国内媒体报道说 Allo 是 Google 向社交领域的又一次新的尝试，这绝对是无中生有的事情，Google 可从来没有这么说过。拥有了上下文理解的能力，Google 可以依据上下文为你的回复提出建议，从而使你处理消息的效率得到空前的提高。至于 Due 的视频聊天、可以变化的聊天框之类的，不过是丰富产品功能，而不是发布一个原型的点睛之笔而已。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Google Assistant 是 Siri 的竞品吗？你就胡扯吧，Google Assistant 是 Skynet 的竞品。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Google 今天拥有了任何其他互联网公司都难以匹敌的机器学习的能力，Google 现在所作的，就是将这种空前的智能，尽可能多地运用到 Google 的产品中。这是这场 I/O 大会上，花最大篇幅讲的事情。&lt;/p&gt;
&lt;h3 id=&quot;VR-需要怎样的生态？&quot;&gt;&lt;a href=&quot;#VR-需要怎样的生态？&quot; class=&quot;headerlink&quot; title=&quot;VR 需要怎样的生态？&quot;&gt;&lt;/a&gt;VR 需要怎样的生态？&lt;/h3&gt;&lt;p&gt;Google Daydream 的提出不是孤立的，它是 Android N 的一部分，大可不能孤立来看。VR 设备对于渲染的要求是空前的，对于相同场景的渲染，其算力的要求几乎是数倍于传统 3D 应用的。所以我们见到 VR 设备通常需要一台性能强大的主机作为其算力的提供。手机能作为 VR 的运算显示设备吗？&lt;/p&gt;
&lt;p&gt;首先，为什么要用手机作 VR 的运算显示设备。在今天，VR 还没有广泛普及，更实际的情况是，大多数人都没有体验过 VR 的神奇。VR 设备昂贵的价格注定了它推广和铺货难度极高。在三年前的 Google I/O 大会上 Google 拿出的 Cardboard 将 VR 的成本一下子降低到了一个极低的程度，中国现在销售的大多数 VR 设备，无疑就是 Cardboard，以及基于 Cardboard 设计修改的延伸产品。&lt;/p&gt;
&lt;p&gt;但 Cardboard 的体验无疑是比较差的，受限于手机的算力，手机的 VR 场景过于简单。Google 所构想的手机 VR 是「可用于体验」的，而不是「存在于技术」的。作为一家软件公司，Google 所作的是支持 Vulkan API 大幅提高渲染性能、新的 JIT 编译器大幅提高运算性能、提出硬件标准给予参考。而这三者都囊括在了 Android N 的更新之中。&lt;/p&gt;
&lt;p&gt;硬件 -&amp;gt; API -&amp;gt; 应用 的完整生态由 Google 所构建。没有便于开发的 API，大多数开发者都没有足够的性能优化能力。没有合适的硬件标准，那么硬件厂商也只会随心所欲地设计而不能兼容。Google 所作的比起国内大多数 VR 公司想得都清楚和明白得多，而 Google 也有这个技术能力去实现它。&lt;/p&gt;
&lt;h3 id=&quot;Android-N&quot;&gt;&lt;a href=&quot;#Android-N&quot; class=&quot;headerlink&quot; title=&quot;Android N&quot;&gt;&lt;/a&gt;Android N&lt;/h3&gt;&lt;p&gt;Android N 还有一些其它关键的点。Google 这次 N Preview 提出得非常早，现在又放出给 N 的开发代号起名字的活动。以及这次放出的 Android Wear 2.0 的系统，我们可以看成 Android Wear N 的版本。其实际是希望开发者参与到 Android N 的开发中来，由开发者的实际使用来进化 Android N 的 API 设计。Android N 从某种角度就是微软的 Windows 10，一个由社区推动，不断更新的操作系统。不过好在 Google 似乎对于品控非常在意，就目前的测试版来看，也不至于存在那么多 bug。也避免新版本系统对应用适配存在问题。&lt;/p&gt;
&lt;p&gt;另一方面 Android N 与 Android Studio 的新更新结合非常紧密。Android Studio 所提出的 Instant Deploy，也就是在测试程序时，通过分析修改了的部分的代码，部分更新程序而不必整个重新运行，大大方便了软件开发过程中调试的过程。而利用这种部分更新的特性，Google 这次也带来了可以即时运行的程序，让 App 的体验省去了下载的步骤。虽然是细微的变化，但带来的用户体验的提升是非常好的，同时也证明了 Google Android Studio 的开发与 Android Platform 的开发步调一致。&lt;/p&gt;
&lt;h3 id=&quot;后&quot;&gt;&lt;a href=&quot;#后&quot; class=&quot;headerlink&quot; title=&quot;后&quot;&gt;&lt;/a&gt;后&lt;/h3&gt;&lt;p&gt;Google 这次通过 Google I/O 所展示的，并不是一个个孤立的产品。其实所要展示的是 Google 产品之间的联系、生态，以及 Google 在这些产品背后的技术实力。这种贯穿始终的硬实力，是任何一家国内靠情怀、贬低友商、炒股票和耍猴为生的国内互联网厂商所根本无法达到的。看起来相似的演说、场地和产品发布，其背后的深度实在是大为不同。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引&quot;&gt;&lt;a href=&quot;#引&quot; class=&quot;headerlink&quot; title=&quot;引&quot;&gt;&lt;/a&gt;引&lt;/h3&gt;&lt;p&gt;Google I/O 2016 的 Keynote 部分结束后，各大媒体总会开始进行报道。然而作为一项面向开发者的活动，一般媒体都将其当作产品发布会来报道，以至于通篇流水账，完全不知所云。我今年是在桂林路的 GDG Shanghai Launchpad 和许多人一起观看了 Google I/O 2016 的直播。报名人数远超预期，导致场馆拥挤不堪，说实话，我甚至只能看半个屏幕。好在我英语听力水平不次，回来又看了一遍重播，对于 Google 在这次 Keynote 中想表达的大概有了清晰的认识。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Google" scheme="http://blog.heckpsi.com/tags/Google/"/>
    
      <category term="Google I/O" scheme="http://blog.heckpsi.com/tags/Google-I-O/"/>
    
  </entry>
  
  <entry>
    <title>一款祖传的机械键盘</title>
    <link href="http://blog.heckpsi.com/2016/05/14/customized-machanical-keyboard/"/>
    <id>http://blog.heckpsi.com/2016/05/14/customized-machanical-keyboard/</id>
    <published>2016-05-14T08:31:15.000Z</published>
    <updated>2016-05-15T03:20:12.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;引&quot;&gt;&lt;a href=&quot;#引&quot; class=&quot;headerlink&quot; title=&quot;引&quot;&gt;&lt;/a&gt;引&lt;/h2&gt;&lt;p&gt;去年的时候就打算购买一款 60% 键盘以方便日常携带。时值开源哥在搞团购 Vim 布局的机械键盘的订购，就订了一把，结果由于一些原因，这单子被取消了。于是我就购买了一把 HHKB pro 2 静电容键盘。虽然说 HHKB 的键位设置和跳线的设计携带起来非常好，但是缺乏段落感的按键还是让人没有那种敲打起来的爽快感。于是我就打算客制化一把机械键盘来满足这个要求。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;硬件&quot;&gt;&lt;a href=&quot;#硬件&quot; class=&quot;headerlink&quot; title=&quot;硬件&quot;&gt;&lt;/a&gt;硬件&lt;/h2&gt;&lt;p&gt;如果要说 60% 的客制化套件的话，主要还是以 GH60 以及其延伸的一系列板子为主。开源哥之前推荐我使用 NerD60 的板子，可惜这块板子在国内并不容易买到。&lt;/p&gt;
&lt;p&gt;轴体的选择使用了相对非常激进的 Cherry 绿轴，比起青轴，同样拥有二段式设计的绿轴的压力克数更高（clerk 声也更响），敲击感非常强，反馈非常明确，当然，对于害怕吵到其他人的话，这轴显然不是一个好选择。&lt;/p&gt;
&lt;p&gt;键帽使用了三种颜色搭配的 PBT 无刻键帽，主要是因为现成的刻字键帽来说，显然是无法印刷修改非常严重的自定义按键的，而定制刻字的 PBT 键帽成本又太高，索性也就选择了无刻。&lt;/p&gt;
&lt;p&gt;虽然阳极氧化铝的底座轻便又质感十足，通常是首选。不过既然作为一款码农世家祖传的键盘，最终选择了相对来说观感上更有冲击力的红花梨木底座。其余配置见下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类别&lt;/th&gt;
&lt;th&gt;选料&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;主板&lt;/td&gt;
&lt;td&gt;GH60 (Rev.CHN)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;轴体&lt;/td&gt;
&lt;td&gt;Cherry 绿轴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;键帽&lt;/td&gt;
&lt;td&gt;PBT 无刻（红色、灰色、白色）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LED&lt;/td&gt;
&lt;td&gt;白色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;定位板&lt;/td&gt;
&lt;td&gt;黑色阳极氧化铝上色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;底座&lt;/td&gt;
&lt;td&gt;红花梨木&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;USB&lt;/td&gt;
&lt;td&gt;LINDY Mini-USB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;由于我这个烙铁苦手，就上淘宝找了一家常州的 &lt;a href=&quot;https://yikewaishe.taobao.com/shop/view_shop.htm?user_number_id=134583372&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;厂家&lt;/a&gt;（并没有广告关系，也没有肮脏的交易），对方当天就组装完发货，第二天一大早竟然就送到了。于是拿到手后就进入了修改固件，修改键位的过程了。&lt;/p&gt;
&lt;p&gt;到手的货物长这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.heckpsi.com/keyboard-2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.heckpsi.com/keyboard-1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;固件&quot;&gt;&lt;a href=&quot;#固件&quot; class=&quot;headerlink&quot; title=&quot;固件&quot;&gt;&lt;/a&gt;固件&lt;/h2&gt;&lt;p&gt;客制化键盘的一大好处就是客制化的按键配列，这一点在 60% 和 40% 的键盘上非常重要。我结合我之前 HHKB 的使用经验，我就大致设计了一个如下的配列：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.heckpsi.com/keyboard_5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;（其中左前方的按键为 Fn 组合键，右前方的是 Fn1 组合键）&lt;/p&gt;
&lt;p&gt;然而客制化固件的刷入还有一些问题。首先这板子是 Rev.CHN 的，一上来刷入就失败了好几次。直到看到了大鹰的 &lt;a href=&quot;https://bigeagle.me/2015/07/gh60/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;（没想到大鹰去年也参了开源哥的团，后来也从同一个卖家手里组装了键盘）。&lt;/p&gt;
&lt;p&gt;当然这之前我找到了一个简便的选择 &lt;a href=&quot;http://www.enjoyclick.org/tkg/#help&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TKG Keypad Generator&lt;/a&gt;，它能自动生成 avr 单片机的 eep 文件，理论上可以直接刷入。但是我刷入之后无法正常引导键盘，所以还是需要使用 &lt;a href=&quot;https://github.com/kairyu/tmk_keyboard_custom&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tmk-keyboard-custom&lt;/a&gt; 自己编译刷入（&lt;code&gt;git clone&lt;/code&gt; 的时候切记加入 &lt;code&gt;recursive&lt;/code&gt; 参数，因为核心模块以 &lt;code&gt;submodule&lt;/code&gt; 的形式出现在这个 &lt;code&gt;repository&lt;/code&gt; 中）。不过还是可以使用 TKG Keypad Generator 所生成的 c 语言代码，稍作修改进行编译即可。&lt;/p&gt;
&lt;p&gt;首先把生成的文件命名成 &lt;code&gt;keypad_xxx.c&lt;/code&gt; 文件，&lt;code&gt;xxx&lt;/code&gt; 为你配列自己的命名。不过直接刷入似乎会遇到一些编译问题，需要在文件后加入如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifdef&lt;/span&gt; KEYMAP_IN_EEPROM_ENABLE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt; keys_count(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(keymaps) / &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(keymaps[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]) * MATRIX_ROWS * MATRIX_COLS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt; fn_actions_count(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(fn_actions) / &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(fn_actions[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后按下键盘背后的 dfu 按钮，使用命令行指令刷入&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;make KEYPAD=xxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make KEYPAD=xxx dfu&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;刷入后拔掉 USB 线，按住 BackSpace + Space，插入线缆，3 秒后放掉按键刷新 EEPROM 后，新配列即可工作。&lt;/p&gt;
&lt;p&gt;然后我发现我设计的三个多媒体用途的键中，只有暂停键是可用的，上一首和下一首都不能正常工作，仔细研究后才发现 Mac 机器的上一首和下一首的 KeyCode 和 PC 略有区别，修改后重新编译了固件，按键都能正常工作了。&lt;/p&gt;
&lt;h2 id=&quot;后&quot;&gt;&lt;a href=&quot;#后&quot; class=&quot;headerlink&quot; title=&quot;后&quot;&gt;&lt;/a&gt;后&lt;/h2&gt;&lt;p&gt;当然这块键盘有哪些不满意的地方呢，还是有的。一个问题是右上角的大按键如果拆成两个小按键，对于 &lt;code&gt;BackSpace&lt;/code&gt; 和 &lt;code&gt;\&lt;/code&gt; 的设计会变得方便更多，这个实在定位板的选择上出了一些问题。&lt;/p&gt;
&lt;p&gt;另一个就是白色的 LED 灯，哪怕是最低亮度也能轻易地透过白色的按键却无法透过别的按键，这使得这个灯的开启变成了一个比较尴尬的问题。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引&quot;&gt;&lt;a href=&quot;#引&quot; class=&quot;headerlink&quot; title=&quot;引&quot;&gt;&lt;/a&gt;引&lt;/h2&gt;&lt;p&gt;去年的时候就打算购买一款 60% 键盘以方便日常携带。时值开源哥在搞团购 Vim 布局的机械键盘的订购，就订了一把，结果由于一些原因，这单子被取消了。于是我就购买了一把 HHKB pro 2 静电容键盘。虽然说 HHKB 的键位设置和跳线的设计携带起来非常好，但是缺乏段落感的按键还是让人没有那种敲打起来的爽快感。于是我就打算客制化一把机械键盘来满足这个要求。&lt;/p&gt;
    
    </summary>
    
    
      <category term="键盘" scheme="http://blog.heckpsi.com/tags/%E9%94%AE%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>当今计算机教学的普遍问题</title>
    <link href="http://blog.heckpsi.com/2016/04/24/problems-of-it-textbooks-now/"/>
    <id>http://blog.heckpsi.com/2016/04/24/problems-of-it-textbooks-now/</id>
    <published>2016-04-23T17:10:44.000Z</published>
    <updated>2016-04-23T17:53:03.000Z</updated>
    
    <content type="html">&lt;p&gt; 今天的计算机行业，特别是互联网行业，又一次成为了人人谈论的朝阳产业，越来越多的人希望加入到这个行业里。但是，不得不指出的是，计算机科学，作为一门工程与科学相结合的学科，并没有任何捷径可走。任何人，如果想在这个行业中哪怕是进入一个平均水平，也需要系统地进行学习。&lt;/p&gt;
&lt;p&gt;越来越多的人渴望得到计算机科学上的教学，但同时，计算机行业又在以一个非常快速的方式在发展和进步着。每年、每个月甚至是每天，都能见到一些令人兴奋的新特性、新技术的产生。不得不说，今天的计算机教学，很大程度上，与计算机行业的发展已经拖了钩。任何一门课程、教科书都无法及时跟上最新技术发展的脚步，成为了新人进入行业很大的阻碍。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;如果一位老师，从事计算机教学，却不从事实际的开发工作，那么他的技术栈也将很快落后于行业。这意味着，我们无法像过去那样，通过专业的「师范」教学，培养优秀的计算机科学教师。落后的教学内容很可能是「无用的」或者用处「极少的」，因为他们通常会在一些已经被解决的问题上浪费太多的时间。而更要命的是一些教学不只是「无用的」，甚至可能是「有害的」。&lt;/p&gt;
&lt;p&gt;从标准被制定到采纳并应用于某项技术中需要多久？在今天社区协同的环境下，这些事情的发生有时只要几天。当一项实用的新技术被加入进来后，到教科书的再版需要多久？从再版到教师去学会了这些内容，并能将其教授给学生需要多久？如果这时间花费很长，那么很可能就会教出很多无用的内容。然而相反，从标准被废除到采纳并应用于某项技术中需要多久？废除后能写进教科书再版需要多久？而教师学会并能教授又需要多久？如果这个步骤时间很长，那么，教授的内容就更是「有害的」了。&lt;/p&gt;
&lt;p&gt;更何况，人非圣贤孰能无过。编写教科书的人以及教师的编程经历本身都会影响其对技术的理解。几乎每个老师都难免在教授过程中出现错误。BASIC 出身的谭浩强老师的《C 语言程序设计》整本书仿佛都写着「错误」两字，却依然能走进我国大多数的大学课堂。这样的例子数不胜数，我们无法估量这背后的影响有多大。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;落后、无用、有害，能够从根本上被改变吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果要回答如何缩短技术的更新到教科书更新的时间，我们不妨先问这样一个问题：为什么互联网技术更新如此迅速呢？其答案是互联网技术本身。基于互联网、社区的协同办公，使得一项技术得到社区的普遍认同变得前所未有的迅速。然而教科书在今天，依然还是依赖于传统的编写、审稿、出版的步骤。为什么我们不能依赖互联网技术本身、依赖社区，来编写教科书呢？&lt;/p&gt;
&lt;p&gt;这样操作甚至能带来一个连带的作用，那就是，利用社区的力量来减少教科书中出现错误的可能性。谭浩强老师的《C 语言程序设计》整本书仿佛都写着「错误」两字，但正是由于广泛的使用，几乎每个错误你都能在网上找到。但如果社区从编写教科书时就参与，是不是错误能从教科书中就被直接删除呢？&lt;/p&gt;
&lt;p&gt;今天，长期关注于计算机教学领域的 HeckPsi 将启动全新的实验性项目&lt;a href=&quot;http://edu.heckpsi.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;「HeckPsi Education」/「HeckPsi 公开课」&lt;/a&gt; —— 一个依赖于社区进行的免费、开源、实时的教科书计划。一个社区中的每个人都能参与新建、更新、修正教科书的计划，它让教学变得前所未有地与时俱进。而 HeckPsi 从中扮演的角色，仅限于审核的工作。在未来数日内，HeckPsi 将逐步公开社区参与的具体流程，我们希望这次试验能使得计算机科学的教学迈上真正的计算机时代。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt; 今天的计算机行业，特别是互联网行业，又一次成为了人人谈论的朝阳产业，越来越多的人希望加入到这个行业里。但是，不得不指出的是，计算机科学，作为一门工程与科学相结合的学科，并没有任何捷径可走。任何人，如果想在这个行业中哪怕是进入一个平均水平，也需要系统地进行学习。&lt;/p&gt;
&lt;p&gt;越来越多的人渴望得到计算机科学上的教学，但同时，计算机行业又在以一个非常快速的方式在发展和进步着。每年、每个月甚至是每天，都能见到一些令人兴奋的新特性、新技术的产生。不得不说，今天的计算机教学，很大程度上，与计算机行业的发展已经拖了钩。任何一门课程、教科书都无法及时跟上最新技术发展的脚步，成为了新人进入行业很大的阻碍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="站务" scheme="http://blog.heckpsi.com/tags/%E7%AB%99%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>HeckPsi 2016 全新博客系统</title>
    <link href="http://blog.heckpsi.com/2016/04/21/heckpsi-blog-2016/"/>
    <id>http://blog.heckpsi.com/2016/04/21/heckpsi-blog-2016/</id>
    <published>2016-04-21T14:56:14.000Z</published>
    <updated>2016-04-21T15:36:12.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;HeckPsi 博客 2016 迎来了巨大的改版！&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;这是个啥？&quot;&gt;&lt;a href=&quot;#这是个啥？&quot; class=&quot;headerlink&quot; title=&quot;这是个啥？&quot;&gt;&lt;/a&gt;这是个啥？&lt;/h3&gt;&lt;p&gt;正如你所见，HeckPsi 的全新博客系统变得非常地 &lt;em&gt;清新&lt;/em&gt; 。在深思熟虑之后，我们发现，以前的主页，看似非常炫酷，实则净是废话。于是借由 HeckPsi 主页改版的机会，HeckPsi 博客系统也迎来了巨大的更新！&lt;/p&gt;
&lt;h4 id=&quot;这个博客用来干什么？&quot;&gt;&lt;a href=&quot;#这个博客用来干什么？&quot; class=&quot;headerlink&quot; title=&quot;这个博客用来干什么？&quot;&gt;&lt;/a&gt;这个博客用来干什么？&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;发布对于业内见闻的评论&lt;/li&gt;
&lt;li&gt;发布对科技相关的科普&lt;/li&gt;
&lt;li&gt;发布我们所坚持的价值观&lt;/li&gt;
&lt;li&gt;&lt;del&gt;瞎搞&lt;/del&gt; 实验性内容&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;所以，我们的博客需要什么&quot;&gt;&lt;a href=&quot;#所以，我们的博客需要什么&quot; class=&quot;headerlink&quot; title=&quot;所以，我们的博客需要什么&quot;&gt;&lt;/a&gt;所以，我们的博客需要什么&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;清晰高效的排版&lt;/li&gt;
&lt;li&gt;便于快速编辑（Markdown 什么的最好，可视化编辑器太累）&lt;/li&gt;
&lt;li&gt;静态化的页面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;于是就有了现在你所看到的博客系统。它使用了 &lt;a href=&quot;https://github.com/hexojs/hexo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo&lt;/a&gt; 项目生成静态页面，以及使用了 &lt;a href=&quot;https://github.com/pinggod/hexo-theme-apollo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo-theme-apolo&lt;/a&gt; 项目的主题，并进行了一定地定制开发。&lt;/p&gt;
&lt;p&gt;相比之下，我们拥有了更加强大地对网站的控制权利，可以做更多地功能模块的定制，以进一步满足我们未来的要求。至于为什么没有使用 &lt;a href=&quot;https://jekyllrb.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jekyll&lt;/a&gt; ，单纯是因为 hexo 更适合做博客，而 Jekyll 什么都适合做，有些无从下手。&lt;/p&gt;
&lt;h3 id=&quot;停更的几个月发生了啥？&quot;&gt;&lt;a href=&quot;#停更的几个月发生了啥？&quot; class=&quot;headerlink&quot; title=&quot;停更的几个月发生了啥？&quot;&gt;&lt;/a&gt;停更的几个月发生了啥？&lt;/h3&gt;&lt;p&gt;首先，HeckPsi 成立了在国内注册的公司，并以此申请了备案。所以我们的服务器现在可以运行在中华人民共和国境内，以提供更快的服务。&lt;/p&gt;
&lt;p&gt;其次，我们深刻考虑了我们未来的业务形态。最近也将会有比较大的动向，开出某个全新的板块，以及某些神秘的产品，尽请期待。&lt;/p&gt;
&lt;p&gt;最后就是旧博客的数据之前放在 AWS Japan 上，出了一些小问题，差点丢失。幸好已经通过完备的日志系统还原了大部分数据，并且将于近期还原。未来我们的博客数据都会实现多点异地备份，保证其安全性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;承蒙各位厚爱，HeckPsi 会坚持做下去。&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;HeckPsi 博客 2016 迎来了巨大的改版！&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="站务" scheme="http://blog.heckpsi.com/tags/%E7%AB%99%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>认识 Y-Combinator</title>
    <link href="http://blog.heckpsi.com/2016/03/19/learn-y-combinator/"/>
    <id>http://blog.heckpsi.com/2016/03/19/learn-y-combinator/</id>
    <published>2016-03-19T00:50:00.000Z</published>
    <updated>2016-04-21T16:34:12.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;写在开始&quot;&gt;&lt;a href=&quot;#写在开始&quot; class=&quot;headerlink&quot; title=&quot;写在开始&quot;&gt;&lt;/a&gt;写在开始&lt;/h2&gt;&lt;p&gt;不得不说，当我开始学习函数式编程的时候，我并没有被匿名函数感到害怕，理解它的基本概念是极其容易的。但是当你试图去将你日常所书写的指令式的代码转换成函数式，特别是纯函数式的时候，你会感到这是不可能的。它和你之前的编程思想是完全脱离的。&lt;/p&gt;
&lt;p&gt;所以当我第一次见到 Y-Combinator（Y 组合子）的时候，我的感觉是懵逼的，这是什么玩意。然而当我一步一步，了解这个东西是什么，它是怎么工作的之后，我对函数式编程的认识有了很大的进步。&lt;/p&gt;
&lt;p&gt;即使是 C++ 这样的语言，也在 C++11 标准中引入了匿名函数，使得你有机会在 C++ 中使用函数式编程的特性。在编程中，如果能适当地使用函数式语法进行编程，将非常有助于你写出一些更好理解、更简单的代码。&lt;/p&gt;
&lt;p&gt;而在了解一些基本概念之后，了解一下 Y-Combinator 是一个极好的选择，这个东西证明了函数式编程对递归的语义理解，证明了其在递归上和指令式编程的等价之处。你可以通过观察等价的这两者的不同的实现方式，来加深对这两者思想的认识。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;与指令式编程的根本区别&quot;&gt;&lt;a href=&quot;#与指令式编程的根本区别&quot; class=&quot;headerlink&quot; title=&quot;与指令式编程的根本区别&quot;&gt;&lt;/a&gt;与指令式编程的根本区别&lt;/h2&gt;&lt;p&gt;大家看下面一段 C 代码&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;puts&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;显然这是一个非常常见的循环。然而这样的循环显然已经被抽象过了，我们也许可以用一个更原始的方法来实现。且让我引入一个 C 开发中应尽量避免的语句 &lt;code&gt;goto&lt;/code&gt; 来解释。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;loop:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i &amp;gt;= &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;puts&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; loop;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;next:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这两段代码除了变量 &lt;code&gt;i&lt;/code&gt; 的作用域有所区别以外几乎是等价的。相对的，第二段代码非常接近于编译到汇编时的指令，几乎是一一映射的。然而你可以发现，我们的循环都是依赖于跳转代码行数的，不得不说这种写法非常不函数式。&lt;/p&gt;
&lt;h2 id=&quot;第一个函数&quot;&gt;&lt;a href=&quot;#第一个函数&quot; class=&quot;headerlink&quot; title=&quot;第一个函数&quot;&gt;&lt;/a&gt;第一个函数&lt;/h2&gt;&lt;p&gt;我们可以用一个递归来把这个循环实现地更像一个函数：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;puts&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return loop(n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;loop(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虽然这个函数是倒过来循环的，但我们大可忽略这些细节，毕竟要做修改也是相对容易的。我们通过一个函数递归的方式来实现了一个循环。需要特别注意的是，如果根据递归的定义，那么这个循环一旦大起来在今天我们的计算机的计算模型（而不是 Lisp Machine）上是会爆栈的，但好在由于是个尾递归，通常是会直接被编译器优化成一个循环的。这确保了即使你写的是函数式代码，也可以最终编译成适合 CPU 运算的形式而不太影响性能。&lt;/p&gt;
&lt;p&gt;不过递归有一个问题，我们必须知道函数的名称才能这么做，在真正的 Lambda 运算模型上，函数是匿名的，也就是没有名字，这样你最后根本就无处调用你函数自己。因为你无法写出下面的代码（Ruby）：&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;lambda &amp;#123; &lt;span class=&quot;params&quot;&gt;|n|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  puts &lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  what_the_f**k_my_function_name_is(n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;魔法少女-Lambda-酱&quot;&gt;&lt;a href=&quot;#魔法少女-Lambda-酱&quot; class=&quot;headerlink&quot; title=&quot;魔法少女 Lambda 酱&quot;&gt;&lt;/a&gt;魔法少女 Lambda 酱&lt;/h2&gt;&lt;p&gt;下面我们演示一种黑魔法，来使得你没有办法得到自己函数名时实现递归。简单来说就是把「函数」当成一个「参数」传输。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;loop = lambda &amp;#123;&lt;span class=&quot;params&quot;&gt;|f, n|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  puts &lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  f.call(n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;loop.call(loop, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们把函数本身作为一个参数传了进去，达到了我们的想法。不过这里我们还不是一个完全的匿名函数，而是通过给匿名函数起了一个名字 &lt;code&gt;loop&lt;/code&gt;，在外面调用了一下。不过事到如今，去掉这个 &lt;code&gt;loop&lt;/code&gt; 已经很容易了。由于第一条的匿名函数定义中没有任何地方用到 &lt;code&gt;loop&lt;/code&gt; 只在第二条指令中用到。我们只要将第二条指令中的所有 &lt;code&gt;loop&lt;/code&gt; 都代换掉就行。我们就能得到下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;lambda &amp;#123;&lt;span class=&quot;params&quot;&gt;|f, n|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  puts &lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  f.call(n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;.call(lambda&amp;#123;&lt;span class=&quot;params&quot;&gt;|f, n|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    puts &lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f.call(n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;柯里化，最后一步&quot;&gt;&lt;a href=&quot;#柯里化，最后一步&quot; class=&quot;headerlink&quot; title=&quot;柯里化，最后一步&quot;&gt;&lt;/a&gt;柯里化，最后一步&lt;/h2&gt;&lt;p&gt;Amazing！我们通过一个匿名函数的调用成功实现了一个 100 的循环。我们现在距离 Haskell Brooks Curry 先生当年推出 Y 组合子只差一步，那就是将我们做的事情「Currying」（柯里化）。所谓 Currying 就是使用一个高阶函数，将一个函数的多个参数精简成一个。我们看到我们现在的匿名函数还有 &lt;code&gt;f&lt;/code&gt; 和 &lt;code&gt;n&lt;/code&gt; 两个参数，我们打算拿掉它。虽然其实并不是真正意义上的拿掉。柯里化，只不过把一个形如 &lt;code&gt;f(x, y)&lt;/code&gt; 的函数写成了 &lt;code&gt;f(x)(y)&lt;/code&gt;，也就是 &lt;code&gt;f(x)&lt;/code&gt; 的返回是一个匿名函数，而这个匿名函数再以 &lt;code&gt;y&lt;/code&gt; 为参数执行一次。这么搞一下，我们就得到了：&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;lambda &amp;#123;&lt;span class=&quot;params&quot;&gt;|p|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lambda &amp;#123; &lt;span class=&quot;params&quot;&gt;|f|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f.call(f);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;.call(lambda &amp;#123;&lt;span class=&quot;params&quot;&gt;|f|&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; p.call(lambda &amp;#123;&lt;span class=&quot;params&quot;&gt;|x|&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f.call(f).call(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;.call(lambda &amp;#123;&lt;span class=&quot;params&quot;&gt;|f|&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lambda &amp;#123;&lt;span class=&quot;params&quot;&gt;|i|&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      f.call(i-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;).call(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于柯里化后匿名函数和调用的参数都单一了，我们因此可以保证我们能将任意一个递归都表达成一个匿名函数的形式。按照 Lambda 演算的形式化表达  &lt;code&gt;Y := λf.(λx.(f (x x)) λx.(f (x x)))&lt;/code&gt; 。你只要将自己要递归的函数替换掉里面 &lt;code&gt;f&lt;/code&gt; 的位置，并最后执行一下这个匿名函数就成啦~&lt;/p&gt;
&lt;h2 id=&quot;折腾半天干什么&quot;&gt;&lt;a href=&quot;#折腾半天干什么&quot; class=&quot;headerlink&quot; title=&quot;折腾半天干什么&quot;&gt;&lt;/a&gt;折腾半天干什么&lt;/h2&gt;&lt;p&gt;你肯定想问，我们把一个循环写成这么复杂是为了什么。事实上我想展示的不是循环，而是递归。递归在图灵模型（我们通常 CPU 的计算模型）和丘奇模型（Lambda 演算）上都不是那么地原生的实现。&lt;/p&gt;
&lt;p&gt;在图灵模型上地最终形式是每次递归，追加进内存中，并重新 &lt;code&gt;goto&lt;/code&gt; 回函数开始，在退出时，再一步步内存推出来，并将递归的剩余部分执行完。&lt;/p&gt;
&lt;p&gt;而在 Lambda 演算中，最终表达为一个逻辑系统构成的严格的数学函数模型的执行。&lt;/p&gt;
&lt;p&gt;这两者便是具体化和形式化的极限，充分表现了两种模型的特点。从根本加深了对两种模型差异的认知，从而让我们在两种模型上都能通过正确的编程思想来写代码，以把代码写得更好。&lt;/p&gt;
&lt;p&gt;当然也是有一些实际意义的，比如在变量作用域严格的语言中，且又必须使用匿名函数的形式来书写你所需要的东西的时候，而你正好又需要递归才能达到你的要求，那么使用 Y-Combinator 是一个可选的方法。然而通常，出现这种情况大多是你写了错误的思想的代码所导致的，实际编程中几乎遇不到这种情况，毕竟将更抽象更容易理解的函数式编程写成这么一坨一眼看不懂的代码是很失败的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在开始&quot;&gt;&lt;a href=&quot;#写在开始&quot; class=&quot;headerlink&quot; title=&quot;写在开始&quot;&gt;&lt;/a&gt;写在开始&lt;/h2&gt;&lt;p&gt;不得不说，当我开始学习函数式编程的时候，我并没有被匿名函数感到害怕，理解它的基本概念是极其容易的。但是当你试图去将你日常所书写的指令式的代码转换成函数式，特别是纯函数式的时候，你会感到这是不可能的。它和你之前的编程思想是完全脱离的。&lt;/p&gt;
&lt;p&gt;所以当我第一次见到 Y-Combinator（Y 组合子）的时候，我的感觉是懵逼的，这是什么玩意。然而当我一步一步，了解这个东西是什么，它是怎么工作的之后，我对函数式编程的认识有了很大的进步。&lt;/p&gt;
&lt;p&gt;即使是 C++ 这样的语言，也在 C++11 标准中引入了匿名函数，使得你有机会在 C++ 中使用函数式编程的特性。在编程中，如果能适当地使用函数式语法进行编程，将非常有助于你写出一些更好理解、更简单的代码。&lt;/p&gt;
&lt;p&gt;而在了解一些基本概念之后，了解一下 Y-Combinator 是一个极好的选择，这个东西证明了函数式编程对递归的语义理解，证明了其在递归上和指令式编程的等价之处。你可以通过观察等价的这两者的不同的实现方式，来加深对这两者思想的认识。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Lambda" scheme="http://blog.heckpsi.com/tags/Lambda/"/>
    
      <category term="编程" scheme="http://blog.heckpsi.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Lisp" scheme="http://blog.heckpsi.com/tags/Lisp/"/>
    
  </entry>
  
  <entry>
    <title>AlphaGo 是怎么下棋的？</title>
    <link href="http://blog.heckpsi.com/2016/03/18/how-alphago-works/"/>
    <id>http://blog.heckpsi.com/2016/03/18/how-alphago-works/</id>
    <published>2016-03-18T15:09:00.000Z</published>
    <updated>2016-04-21T17:15:40.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本来其实不想写这个的，但是看到很多网友以及一些围棋职业选手提出了一些疑问，比如「Google 没有顶尖的棋手为什么能开发出顶尖的围棋机器人？」还有「机械为什么可以在如此直觉主导的游戏中战胜人类？」。这些问题事实上在人工智能领域已经有很多理论来做解释。而且这些理论也并不是 Google 提出的。AlphaGo 所使用的理论大多还是十余年前左右的论文的一些成果。在此之前，使用了这些理论开发出来的人工智能其实已经在 2006 年就已经在 9x9 的小棋盘上战胜周俊勋九段，之后在 2013 年 CrazyStone 程序就已经在让四子前提下战胜过石田芳夫九段，而就在去年，Facebook 的围棋机器人在不让子的前提下，胜过职业选手。至于之前「前百度深度学习研究院」的吴韧所开发的异构神机也使用的是类似的理论，也在前几天战胜过职业棋手。&lt;/p&gt;
&lt;p&gt;这些方法上，AlphaGo 并无太大创新，很大程度上是 Google 团队实现得相对完善以及训练程度更好，以及人工智能算法的实现和调参存在很大的偶然因素。那么究竟是什么方法让机械拥有了和人一样直觉，而不是简单的机械化的思考。这事我们还是要从头讲起。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;无法计算的数据量&quot;&gt;&lt;a href=&quot;#无法计算的数据量&quot; class=&quot;headerlink&quot; title=&quot;无法计算的数据量&quot;&gt;&lt;/a&gt;无法计算的数据量&lt;/h2&gt;&lt;p&gt;早在 1996 年，IBM 的深蓝计算机就战胜了国际象棋世界名将加里·卡斯帕罗夫。但象棋有一个特点，那就是每一步下的选择是相对非常有限的，最多也就十几种可能。哪怕是通过最最暴力的搜索方法，把每种都跑一遍，搜索几十步内的最优解。虽然这个方法随着搜索深度是指数级增长的，但事实上由于底数比饺小，依靠强大的算力还是可以解决的。而深蓝计算机正是这么一台拥有强大算力的超级计算机。&lt;/p&gt;
&lt;p&gt;然而在围棋上，这样就不行了，因为围棋每一步都有上百种选择，如此大的底数纯粹的暴力就显然无法满足了。至少硬件的发展并非每年成百倍成百倍地快速增长的。同样的方法，显然是不适合使用在围棋上的。&lt;/p&gt;
&lt;p&gt;在 2002 年之前，人们长期研究一个可以通过计算静态地分析出每一子的价值出来。然而这个方法的发展一直很慢。直到人们试图尝试一种动态评估一个博弈的一种方法，这就是靠&lt;strong&gt;猜&lt;/strong&gt;。这个方法被称为蒙特卡洛搜索树，其前身是非常著名的上世纪曼哈顿计划期间由乌拉姆和冯·诺依曼提出的&lt;strong&gt;蒙特卡洛方法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果我们想知道圆周率的值，我们如何利用猜的方法来猜出圆周率呢？我们只需要在一个方形中随机而均匀地扔飞镖，数一下，多少个飞镖扔在了以方形边长为直径的圆里，多少扔在了外面，根据圆的面积公式和方形的面积公式就能把 π 算出来。而蒙特卡洛搜索树就是利用蒙特卡洛方法来优化搜索树。简单来说，就是，我们认为这一步下在一个地方是最优的，而我们不知道这地方在哪里。我们先通过一系列随机的采样，从而去猜测一个值，这个值可能是最优解，也可能是一个接近最优解的解。但至少，这可以用来估算像围棋这样大的棋盘的东西了，而不需要把每个细枝末节都同等对待地来暴力搜索。&lt;/p&gt;
&lt;h2 id=&quot;⑨神的大局观&quot;&gt;&lt;a href=&quot;#⑨神的大局观&quot; class=&quot;headerlink&quot; title=&quot;⑨神的大局观&quot;&gt;&lt;/a&gt;⑨神的大局观&lt;/h2&gt;&lt;p&gt;解决完计算量的问题，我们还要来解决人类在围棋上最大的优势——直觉，或者说「大局观」。那么如何才能拥有大局观呢？我们想一下，人们在下围棋的时候，通常会先考虑下在哪个片区，以获得什么样的目的。而这就是所谓的大局观。&lt;/p&gt;
&lt;p&gt;AlphaGo 的另一部分重要思想，得益于神经科学的发展，即人类认识人大脑神经的发展。人类愈发了解了大脑内神经元的工作模式，包括人类学习、认知的神经模型。这样的非常基础的模型，极大地方便了利用计算机来模拟人类进行学习的过程。&lt;/p&gt;
&lt;p&gt;蒙特卡洛方法只是简化了计算，并不具备学习的能力。无论是单纯的蒙特卡洛搜索还是与 α-β 搜索结合的还是和置信区间结合一些版本，都与人类能越学越强的围棋技巧相比差上太多。至少，人脑是一个极其复杂的计算模型，哪怕是现在最好的计算机，其算力和整个大脑比起来还是差很多的。&lt;/p&gt;
&lt;p&gt;在 2007 年，一些科学家试图提出一个新的机器学习模型，即所谓的深度学习。所谓深度学习，你可以看做模拟许多许多人脑中的神经元构成的一个网络。网络的每一层，针对一个特性进行识别。网络的每一层，都是一个单纯分类的无监督学习模型。你可以想像一下，人眼看到一个图像。经过一系列神经元，首先识别出了里面的眼睛、然后识别了里面的鼻子、嘴，再根据这些特性，发现这是一个人。这样依次发现的机制。而学习是通过一个有监督的反向传播进行。即告诉你这张图像里有一条狗，然后反向的一步步调整网络，让网络适应符合怎么样鼻子、嘴、眼睛的是一条狗。通过不断地数据的训练，即可以让模型越来越优。这个模型在图像识别领域已经达到甚至有时超越了人的识别能力。&lt;/p&gt;
&lt;p&gt;而 AlphaGo 使用的就是深度学习来优化蒙特卡洛搜索树。在 AlphaGo 中有两个网络，一个是策略网络，一个是价值网络。策略网络即是一个大局观的网络，机器会先通过其经验，找出其应该做出进攻的反应还是防守的反应，表现在下在哪个片区是最为合适的，是不是应该跟棋之类的大问题。然后再通过蒙特卡洛搜索树去算出具体下在哪里是最合适的。&lt;/p&gt;
&lt;p&gt;而我们说到，深度学习模型是真的和人一样可以学习的。每下一次棋，它就可以进一步调优自己的策略网络。首先 AlphaGo 导入了上千个职业选手对弈的棋谱，使得自己有了一个基础的下棋策略。这时候的 AlphaGo 就和一个受过系统训练的围棋少年一样了。然而这和职业选手的区别还是很大。这也就是所谓的「Google 没有顶尖的棋手为什么能开发出顶尖的围棋机器人？」按照一般常理，AlphaGo 应该一段一段地和人挑战，越发提高自己能力。然而 AlphaGo 不是这么做的，它选择和自己对弈。两台 AlphaGo 来对弈，将对弈的结果调优自己的网络。这个听起来很奇怪，为什么两个下得都不怎么样的棋手一起下棋，棋艺能那么快提升呢？因为它一天能和自己下上百万盘棋，它可以把自己分身成几万份跑在几万台电脑上，以及可以昼夜不停也不会过劳死，而这是任何一个人类都做不到的。AlphaGo 的开发人员说，他曾在早期能下赢 AlphaGo，而很快，AlphaGo 的水平就远超了他。所以 AlphaGo 得到了飞速的提升。仅仅五六个月，AlphaGo 就能从战胜欧洲棋王挑战到世界顶尖选手的水平了。&lt;/p&gt;
&lt;h2 id=&quot;人工智能的基本法&quot;&gt;&lt;a href=&quot;#人工智能的基本法&quot; class=&quot;headerlink&quot; title=&quot;人工智能的基本法&quot;&gt;&lt;/a&gt;人工智能的基本法&lt;/h2&gt;&lt;p&gt;当然搞人工智能也要有基本法。这个基本法就是算力或者说是资源。虽然做了很大的优化，计算下围棋的计算量还是很大的。比起深蓝时依靠超级计算机来解决问题。AlphaGo 选择了一条适合 Google 的路径来解决算力问题。那就是分布式计算。使用分布式计算的 AlphaGo 版本比起不使用的版本其智能程度也是有相当大的提升。即使最简单，它也可以有更多时间来做随机的尝试，以找出更优的价值解。&lt;/p&gt;
&lt;p&gt;同样利用深度学习优化蒙特卡洛搜索的 Facebook 围棋团队，相比 Google 就没有那么壕力冲天了。无论是开发资源还是人员来说也是远少于 Google。Facebook 的围棋机器人之前也取得了相当好的成绩，大概可以击败职业二段选手的水平。但是比起 AlphaGo，还是差上许多。&lt;/p&gt;
&lt;p&gt;所以说，做这么一个人智能，背后的投入程度、重视程度也起到了很大的作用。这也是为什么深度学习目前做得很好的公司大多是一些顶尖的 IT 企业里的研发团队。&lt;/p&gt;
&lt;h2 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h2&gt;&lt;p&gt;比起 AlphaGo 在围棋上的成就，其实大多数人很好奇人工智能未来的何去何从。从这次中，我们看到计算机已经具备了人类大局判断能力，其本质是类似于人类的学习能力，即不告诉电脑应该怎么做，而让电脑看人类是怎么做的。这项的应用其实相当广泛，尤其在非常复杂的问题上。&lt;/p&gt;
&lt;p&gt;比如说，无人驾驶汽车之前发展很困难，是因为人们总是试图去把驾驶规则完全讲给电脑，而这点太过复杂，难以用纯逻辑说清。而今天 Google 的无人驾驶汽车也是使用的类似的深度学习的技术，让计算机观察人类开车并学习，从而模仿人类的判断。最终依靠计算机强大的算力和不会疲劳等特点，甚至超越人类的判断。&lt;/p&gt;
&lt;p&gt;短期来看，利用深度学习的人工智能在未来数年内将会得到很大的应用。而这也是 Google 热衷于下围棋的原因。醉翁之意不在酒，在乎山水之间也。Google 只是想利用围棋来显示他们在深度学习应用上的先进水平。&lt;/p&gt;
&lt;p&gt;就人工智能的最终目的来看，我们已经跨出了很大的一步。之前而言，我们很大程度局限于人类强大的抽象的思考能力，而模仿人类神经系统的模型已经很好地模拟了这种思考是怎么产生的了。进一步说，如果一个机器，拥有和人完全一样的眼睛、耳朵、鼻子、触觉等作为它的输入，以及类似于人类肌肉和关节的机械部件作为它的输出。并且模拟一个和人脑一样复杂程度的神经网络，并让它观察人类进行学习。是不是在某个未来，我们可以拥有和人类功能非常接近甚至超越人类的智能的出现。深度学习都为这样的强人工智能提出了理论上的基础。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本来其实不想写这个的，但是看到很多网友以及一些围棋职业选手提出了一些疑问，比如「Google 没有顶尖的棋手为什么能开发出顶尖的围棋机器人？」还有「机械为什么可以在如此直觉主导的游戏中战胜人类？」。这些问题事实上在人工智能领域已经有很多理论来做解释。而且这些理论也并不是 Google 提出的。AlphaGo 所使用的理论大多还是十余年前左右的论文的一些成果。在此之前，使用了这些理论开发出来的人工智能其实已经在 2006 年就已经在 9x9 的小棋盘上战胜周俊勋九段，之后在 2013 年 CrazyStone 程序就已经在让四子前提下战胜过石田芳夫九段，而就在去年，Facebook 的围棋机器人在不让子的前提下，胜过职业选手。至于之前「前百度深度学习研究院」的吴韧所开发的异构神机也使用的是类似的理论，也在前几天战胜过职业棋手。&lt;/p&gt;
&lt;p&gt;这些方法上，AlphaGo 并无太大创新，很大程度上是 Google 团队实现得相对完善以及训练程度更好，以及人工智能算法的实现和调参存在很大的偶然因素。那么究竟是什么方法让机械拥有了和人一样直觉，而不是简单的机械化的思考。这事我们还是要从头讲起。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Google" scheme="http://blog.heckpsi.com/tags/Google/"/>
    
      <category term="科普" scheme="http://blog.heckpsi.com/tags/%E7%A7%91%E6%99%AE/"/>
    
      <category term="AlphaGo" scheme="http://blog.heckpsi.com/tags/AlphaGo/"/>
    
      <category term="AI" scheme="http://blog.heckpsi.com/tags/AI/"/>
    
      <category term="机器学习" scheme="http://blog.heckpsi.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>也谈 Android 应用的热更新</title>
    <link href="http://blog.heckpsi.com/2016/02/06/android-hot-patch/"/>
    <id>http://blog.heckpsi.com/2016/02/06/android-hot-patch/</id>
    <published>2016-02-05T16:29:00.000Z</published>
    <updated>2016-04-21T16:33:33.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;这几天支付宝的所谓「隐私门」的火热程度非同一般。至于支付宝有没有监控用户的隐私数据，双方至今也没有争论出一个结果出来。但我倒是被阿里官方所发的声明所惊讶到了，它们在声明中提到，他们可以在云端开关你手上支付宝的功能，这一点是违背对 Java 作为静态语言的常识的。而网友更是发现，这一点并不是用 API 来简单控制的，而是可以从云端下发代码下来来实现「热更新」，随时修改 apk 的本身。稍加研究，就发现了手机淘宝团队曾经在 QCon 上做过有关于相关主题的 &lt;a href=&quot;http://www.infoq.com/cn/presentations/mobile-phone-taobao-hotpatch-technology-introduction&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;演讲&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;手机淘宝的热更新技术基于他们所开发的 Dexposed 框架，而 Dexposed 框架其实就是一个应用内的 Xposed 框架，而手机淘宝团队也大方承认了他们的许多代码也是直接从 Xposed 的开源项目里拿的。通过这个技术，框架对应用内的类都实现了 hook，可以通过云端下发的 dex 对这些类进行动态的修改，并且只损失相当较小的性能。而这个技术脱离了传统想要动态修改代码必须把整个开发框架都更换为运行于脚本语言之上的尴尬。&lt;/p&gt;
&lt;p&gt;然而当我细究这个框架的时候发现了一些问题。阿里虽然对这一框架进行了 &lt;a href=&quot;http://github.com/alibaba/dexposed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;开源&lt;/a&gt; 。但已经很久没有更新过新版本了。当前的版本只支持到了 Android 4.4。由于 5.0 起新的 ART 虚拟机、更严格的 SELinux 策略以及对 64 位的支持之类的事，使得 Xposed 都在开发上做了很多调整。我不知道 Dexposed 现在是否支持，但至少阿里没有开源。&lt;/p&gt;
&lt;p&gt;考虑到这些情况，我正在考虑我们是不是有一个其它的更加通用的路径在 Java 上来实现动态的修改方法从而进行热更新。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;警告&quot;&gt;&lt;a href=&quot;#警告&quot; class=&quot;headerlink&quot; title=&quot;警告&quot;&gt;&lt;/a&gt;警告&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;在本地动态执行远端下发的代码是极度危险的行为。利用此方法执行非法代码等或用于绕过 Google Play 等市场的审查是违反相关协议的，也是对用户极度不负责任的行为。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;ART-虚拟机带来的挑战&quot;&gt;&lt;a href=&quot;#ART-虚拟机带来的挑战&quot; class=&quot;headerlink&quot; title=&quot;ART 虚拟机带来的挑战&quot;&gt;&lt;/a&gt;ART 虚拟机带来的挑战&lt;/h2&gt;&lt;p&gt;Xposed 面对 ART 虚拟机的时候究竟是遇到了什么样的问题呢？这要从 ART 虚拟机的原理说起。Java 是一门编译成 ByteCode，并由本地的虚拟机进一步动态地解释成机器码的语言。在旧版本的 Android 上所使用的 Dalvik 虚拟机其运行原理与 Oracle 的官方虚拟机是非常接近的。这样的解释对性能的消耗，虽然有 JIT 对其运行的优化，比起像 Objective-C 这样的纯编译语言来说还是差上一些性能的。&lt;/p&gt;
&lt;p&gt;为了解决性能上的颓势，Android 在 4.4 版本上首次引入了默认不开启的测试版本的 ART 虚拟机，并在 Android 5.0 上成为了默认的虚拟机。其重要的变化是在 apk 的安装过程中，进行所谓 AOT(Ahead-of-Time) 的优化。即在安装过程中尽可能地将 ByteCode 静态编译了，并进行代码优化。这使得运行时注入的难度更高了。&lt;/p&gt;
&lt;p&gt;Xposed 框架通过修改了 libart.so 等相关虚拟机文件关闭了一系列的优化，才使得框架终在 Android 5.0 上运行。而相对的，Dexposed 并不能修改系统虚拟机文件，毕竟这只是应用内的框架，这就使得难度变得很高。代码一旦被静态编译甚至被优化后再做 Java 层面上的 hook 确实难度很高。那么我们能不能在 Java 本身上找到一种被语言本身所支持的 hook 方式以使得更好的兼容呢？&lt;/p&gt;
&lt;h2 id=&quot;Java-的馈赠&quot;&gt;&lt;a href=&quot;#Java-的馈赠&quot; class=&quot;headerlink&quot; title=&quot;Java 的馈赠&quot;&gt;&lt;/a&gt;Java 的馈赠&lt;/h2&gt;&lt;p&gt;显然，Java 是没有 eval() 函数的，也就是没有语言本身所支持的可以动态运行 Java 代码的方法。但当我在 Java 的文档里搜索 eval 的时候，我还真发现了一些什么。自 JDK 1.6 起，Java 内置了一个执行脚本的包 javax.script。目前支持的语言只有 JavaScript。也就是说 Java 内置了一个「动态语言」 JavaScript 的解释器！&lt;/p&gt;
&lt;p&gt;等一下，我并不是希望你用 JavaScript 来写 Android 应用，因为这毕竟不那么快，我们之所以写原生应用，性能是我们考虑的一大原因。但是如果我们仅在热更新时「临时地」插入一段 JavaScript 代码也并不是一件坏事。但这样的话就存在一个问题，那就是 Java 的变量和 JavaScript 变量如何绑定的问题了。没关系，ScriptEngine 早已实现了这一功能。你可以通过 ScriptEngine.put(String, Object) 的方法在运行前写入 JavaScript 的变量，在运行后通过 ScriptEngine.get(String) 的方法来获得变量。&lt;/p&gt;
&lt;p&gt;示例的 Java 代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ScriptEngine engine = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ScriptEngineManager().getEngineByName(&lt;span class=&quot;string&quot;&gt;&quot;javascript&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  engine.put(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  engine.put(&lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  engine.eval(&lt;span class=&quot;string&quot;&gt;&quot;var ans_1 = a + b; var ans_2 = a - b;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  System.out.println(engine.get(&lt;span class=&quot;string&quot;&gt;&quot;ans_1&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  System.out.println(engine.get(&lt;span class=&quot;string&quot;&gt;&quot;ans_2&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;打印如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-1.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;利弊&quot;&gt;&lt;a href=&quot;#利弊&quot; class=&quot;headerlink&quot; title=&quot;利弊&quot;&gt;&lt;/a&gt;利弊&lt;/h2&gt;&lt;p&gt;这样做的好处是很显然的，这是 Java 语言层的支持，兼容性好得惊人。而且，这不会影响到 ART 虚拟机的 AOT 优化，你的代码依然可以在 Android 5.0+ 上和原来一样快。&lt;/p&gt;
&lt;p&gt;但弊端也是很明显的。插入的代码由于是脚本语言，初始化脚本语言引擎和变量传递都是一个比较消耗性能的东西。但是你大可只在热更新的地方才初始化脚本语言引擎，在没有被更新到的地方依然正常地运行下去。不过在一些访问非常密集的地方使用热更新可能会对效率产生相对比较大的影响，应该避免使用。&lt;/p&gt;
&lt;h2 id=&quot;示例封装&quot;&gt;&lt;a href=&quot;#示例封装&quot; class=&quot;headerlink&quot; title=&quot;示例封装&quot;&gt;&lt;/a&gt;示例封装&lt;/h2&gt;&lt;p&gt;说完这些，我们可以对 Java 的 ScriptEngine 进行一些封装成为一个 HotPatch 类使得它更适合做热更新的工作。&lt;/p&gt;
&lt;p&gt;Hot Patch 需要注入的地方分为三个类型&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;入口 Activity&lt;/li&gt;
&lt;li&gt;类方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;入口-Activity&quot;&gt;&lt;a href=&quot;#入口-Activity&quot; class=&quot;headerlink&quot; title=&quot;入口 Activity&quot;&gt;&lt;/a&gt;入口 Activity&lt;/h3&gt;&lt;p&gt;对于入口 Activity，我们希望它能发送一个异步的网络请求检测是否有新的热补丁，如果有，那么下载。下载后将对应的需要 hook 的地方的名称和对应的代码以 key-value 的形式保存下来就行。出于方便，我们可以直接使用 Android 内置的 &lt;code&gt;SharedPreferences&lt;/code&gt; 来存储。这样我们只需要在 Activity 的 &lt;code&gt;onCreate&lt;/code&gt; 中通过一个 Annotation 来插入。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@HotPatchUpdate&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;https://www.hotpatch.com/getUpdate&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是，这个 Update 的实现需要有几个注意点。这个管道一定要建立在 https 上，因为下发代码是极其危险的，如果被劫持，后果是无法想象的。其次请求时最好自动带上 Android 版本、手机型号、地区、版本号等信息，以方便更精确地下发，千万不能下发错。然后每次执行到这里时应先检查是否有已经下载好的补丁。如果有，请校验其是否合法，以避免用户升级后，相关的补丁已经过期却仍然被运行导致更大的问题。&lt;/p&gt;
&lt;h3 id=&quot;类方法&quot;&gt;&lt;a href=&quot;#类方法&quot; class=&quot;headerlink&quot; title=&quot;类方法&quot;&gt;&lt;/a&gt;类方法&lt;/h3&gt;&lt;p&gt;类方法里主要有两处做 hook 是最为有效的，一个是方法的一开始，而另一处是 return 处。只要将方法的 i/o hook 了，就能解决所有问题。&lt;/p&gt;
&lt;p&gt;所以我们分别在这两处插入两个 Annotation 的方法，在尽可能不影响优雅度地情况下插入代码。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; android.content.Context context;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(android.content.Context context)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.context = context;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@HotPatchHook&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;addStart&quot;&lt;/span&gt;, context, a, b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c = a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@HotPatchHook&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;addEnd&quot;&lt;/span&gt;, context, c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中 &lt;code&gt;&amp;quot;addStart&amp;quot;&lt;/code&gt; 和 &lt;code&gt;&amp;quot;addEnd&amp;quot;&lt;/code&gt; 分别是两个索引，分别对应去寻找热补丁中对应的代码。而 context 必须传入是因为要找 &lt;code&gt;SharedPreferences&lt;/code&gt;，如果你通过其它方式来实现存储的话，则不需要。&lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;b&lt;/code&gt; 还有 &lt;code&gt;c&lt;/code&gt; 是被 Hook 的变量。有一点特别注意，当参数被 JavaScript 引擎传回时请校验其是否是 null。至于如果一个类型在 JavaScript 中找不到的话，Java 中的 ScriptEngine 所支持的 JavaScript 是可以插入 Java 的 import 包的，所以可以避开这样的问题。形如  &lt;code&gt;String jsCode = &amp;quot;importPackage(java.util);var list2 = Arrays.asList([&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;]); &amp;quot;;&lt;/code&gt;  的代码是可以被解释的。当然你也可以只传入 &lt;code&gt;int&lt;/code&gt;、&lt;code&gt;double&lt;/code&gt;、&lt;code&gt;boolean&lt;/code&gt; 类型，然后手动写 &lt;code&gt;set&lt;/code&gt; 和 &lt;code&gt;get&lt;/code&gt; 方法。这取决于你自己想要什么样的代码风格。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;至此，我们通过实现两个简单的 Annotation 的方法，实现在 Android 上 Java 语言层面所支持的热更新的方法。当然，这样的实现并不是太过完善，还需要做很多细节上的调整。但是对于简单的热更新来说已经是足够好用了，实现一遍的话所需要的代码数也很少。同时，稍作修改，我们可以将这样的代码运行在任何 Java 程序上，实现 Java 客户端的热更新，而不只局限于 Android。&lt;/p&gt;
&lt;p&gt;这样的热更新虽然会带来少许的性能问题，但比起将整个程序都跑在脚本上，这样的解决方案已经好上很多，更重要的是，当你没有热更新时，并不会对性能造成影响。同时，其 Java 语言层面的支持，也使得其兼容性非常良好，可以作为对于作为线上、线下调试的比较好的工具。&lt;/p&gt;
&lt;p&gt;相比 Dexposed，这样的方法还显得比较低级，也无法 hook 系统类，没有办法做更多更底层的操作，也无法支持 ndk。但一般意义上来说，这已经足够好用了。&lt;/p&gt;
&lt;p&gt;但是，最后还是要提醒一句：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在本地动态执行远端下发的代码是极度危险的行为。利用此方法执行非法代码等或用于绕过 Google Play 等市场的审查是违反相关协议的，也是对用户极度不负责任的行为。&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;这几天支付宝的所谓「隐私门」的火热程度非同一般。至于支付宝有没有监控用户的隐私数据，双方至今也没有争论出一个结果出来。但我倒是被阿里官方所发的声明所惊讶到了，它们在声明中提到，他们可以在云端开关你手上支付宝的功能，这一点是违背对 Java 作为静态语言的常识的。而网友更是发现，这一点并不是用 API 来简单控制的，而是可以从云端下发代码下来来实现「热更新」，随时修改 apk 的本身。稍加研究，就发现了手机淘宝团队曾经在 QCon 上做过有关于相关主题的 &lt;a href=&quot;http://www.infoq.com/cn/presentations/mobile-phone-taobao-hotpatch-technology-introduction&quot;&gt;演讲&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;手机淘宝的热更新技术基于他们所开发的 Dexposed 框架，而 Dexposed 框架其实就是一个应用内的 Xposed 框架，而手机淘宝团队也大方承认了他们的许多代码也是直接从 Xposed 的开源项目里拿的。通过这个技术，框架对应用内的类都实现了 hook，可以通过云端下发的 dex 对这些类进行动态的修改，并且只损失相当较小的性能。而这个技术脱离了传统想要动态修改代码必须把整个开发框架都更换为运行于脚本语言之上的尴尬。&lt;/p&gt;
&lt;p&gt;然而当我细究这个框架的时候发现了一些问题。阿里虽然对这一框架进行了 &lt;a href=&quot;http://github.com/alibaba/dexposed&quot;&gt;开源&lt;/a&gt; 。但已经很久没有更新过新版本了。当前的版本只支持到了 Android 4.4。由于 5.0 起新的 ART 虚拟机、更严格的 SELinux 策略以及对 64 位的支持之类的事，使得 Xposed 都在开发上做了很多调整。我不知道 Dexposed 现在是否支持，但至少阿里没有开源。&lt;/p&gt;
&lt;p&gt;考虑到这些情况，我正在考虑我们是不是有一个其它的更加通用的路径在 Java 上来实现动态的修改方法从而进行热更新。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.heckpsi.com/tags/Android/"/>
    
      <category term="JavaScript" scheme="http://blog.heckpsi.com/tags/JavaScript/"/>
    
      <category term="架构" scheme="http://blog.heckpsi.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>SA 屏究竟是一套什么样的技术？（上）</title>
    <link href="http://blog.heckpsi.com/2015/11/01/super-amoled-introduction-part-1/"/>
    <id>http://blog.heckpsi.com/2015/11/01/super-amoled-introduction-part-1/</id>
    <published>2015-11-01T07:15:00.000Z</published>
    <updated>2016-04-21T16:33:53.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;从 LED 聊到 Super AMOLED&lt;/strong&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;万物基于-MIUI-LED&quot;&gt;&lt;a href=&quot;#万物基于-MIUI-LED&quot; class=&quot;headerlink&quot; title=&quot;万物基于 MIUI LED&quot;&gt;&lt;/a&gt;万物基于 &lt;del&gt;MIUI&lt;/del&gt; LED&lt;/h3&gt;&lt;p&gt;LED 是一项非常古老的技术，如果我们追溯其起源，可以到达五十多年前的 1961 年。今天已经是世界第三大半导体制造商德州仪器（Texas Instruments）的两位研究员 Robert Biard 和 Gary Pittman 首次发现了基于砷化镓的半导体材料能够放射出红外线。次年，通用电气公司的（General Electiric Company）的 Nick Holonyak 制造出了首个可以发出可见光的 LED。&lt;/p&gt;
&lt;p&gt;LED，Light-Emitting Diode 即「发光二极管」究其本质当然是一种能发光的半导体。二极管的基本特性简单来理解是说当电流从一个方向流过时，能够很正常的导通。但从反方向流过时，会受到较大的电阻，只能产生微弱的电流。然而这样的特性对于发光特性并没有什么直接的联系。那 LED 为什么会成为一项主流的发光技术呢？那我们应该和另一项我们常见的发光技术来比较发光原理，那就是钨丝灯泡或卤素灯泡（钨卤灯泡）。&lt;/p&gt;
&lt;p&gt;电灯泡的基本原理是根据了黑体辐射理论（非常有意思的是黑体辐射理论作为量子力学的一部分提出在灯泡发明后的一百余年），物体在不同温度下能发出不同频率的光，当温度小的时候通常是肉眼不可见的红外线，而温度高了之后就能发出可见光了（比如我们看到打铁的时候铁块会发出红光）。这样的灯泡首先首先体积不小，其次温度很高，更糟糕的是，白炽灯只有少于 10% 的能量会成为光，发光效率非常低下。&lt;/p&gt;
&lt;p&gt;而 LED 由半导体材料组成，当电流从阳极（p极）流向阴极（n极）的时候，电子会跌落到较低能阶的轨道上，多出的能量会以电磁波（光子）的形式被释出。这样从理论上是发光效率极高的，因为少掉的能量几乎都变成了放出的电磁波。而我们只需要让放出的电磁波是可见光波段我们即可实现发光的作用了。体积、工作温度、发光效率都能远超电灯泡。&lt;/p&gt;
&lt;p&gt;对于 LED 的发展事实上只有一个问题需要考虑，那就是半导体的材料。材料决定了发出了光的频率即颜色。如今人们发现的 LED 无机材料已经超过了 20 多种。&lt;/p&gt;
&lt;h3 id=&quot;把不要显示的东西遮住，液晶显示器（LCD）的基本原理&quot;&gt;&lt;a href=&quot;#把不要显示的东西遮住，液晶显示器（LCD）的基本原理&quot; class=&quot;headerlink&quot; title=&quot;把不要显示的东西遮住，液晶显示器（LCD）的基本原理&quot;&gt;&lt;/a&gt;把不要显示的东西遮住，液晶显示器（LCD）的基本原理&lt;/h3&gt;&lt;p&gt;LED 的最经典的应用当然不是各种信号灯之类，而是是现在普遍使用的液晶显示器（LCD）了。LED 技术的出现意味着我们可以做出比起 CRT（阴极射线管）那样要远距离开枪发光的屏幕更薄更小的屏幕了。然而要利用 LED 做屏幕我们有几个非常关键的问题要解决。首先，LED 的成本并不低，如果我们为每个像素都配上红绿蓝三个 LED 这将变得非常昂贵。但如果我们不这么做的话是无法发出任何合成光的，至少，LED 发的光都是单色光，而像白色这样的光都是合成光，是无法实现的。&lt;/p&gt;
&lt;p&gt;读到这里的有些同学可能就要产生疑问了，既然如此，那我们平时看到商场里卖的白色 LED 灯泡又是怎么做的呢？事实上，现在我们看到的白光 LED 是蓝色或者紫外 LED，然后在灯泡内壁上涂上能吸收蓝光或紫外线发出红光绿光蓝光的荧光剂，从而发出红绿蓝的混合光，即白光。这时候我们就有个很大的消耗，就是荧光剂转换光的颜色的过程中会浪费一部分能量，所以我们看到白色 LED 的发热相比其他颜色还是要高一点的。&lt;/p&gt;
&lt;p&gt;除了利用荧光发出白光的 LED 的技术的发明，另一项重要的技术也是 LCD 发明的重要步骤，那就是液晶（Liquid Crystal）。液晶存在一个特殊的性质就是它的液晶相能改变偏光性。&lt;/p&gt;
&lt;p&gt;简单的你可以认为，一束光含有非常多的小的光子，每个光子在向前运动过程中，自身还会沿着某个随机的方向发生小的振动。而透过一片液晶后，横向振动的正常通过了；垂直振动的撞在了液晶上，能量被液晶吸收放出了热能，无法通过；斜着振动的，垂直部分的能量被吸收，而横向的能量保持，继续通过了液晶。从宏观的角度来看，亮度减少了一半。而如果连续通过两个液晶，而他们能通过的方向是正好垂直的，那么 100% 的光都可以被吸收，完全不发光。&lt;/p&gt;
&lt;p&gt;而液晶本身对电信号敏感，意味着我们能通过通电来改变液晶的方向，从而很容易地控制哪些光应该被遮住哪些应该被通过。屏幕上其实是有两块液晶构成的，第一块就是单纯只让一个方向的光通过，而第二层由电信号控制，来决定透过多少光，显示一个多亮的东西。&lt;/p&gt;
&lt;p&gt;LCD 显示器是由一块白色的 LED 背光，一片液晶和一片被电信号控制的液晶组成的。彩色的 LCD 显示器就是在背光上再贴上红色绿色蓝色的贴纸，来精确控制每个颜色的亮度而已。然而事实上，这种能量损耗是惊人的。首先 LED 由蓝色变成白色需要损失一部分能量，再贴上三色的贴纸又要损失 66% 的能量，通过一片液晶又会损失 50% 的能量。所以最下面的 LED 背光需要非常亮才行。&lt;/p&gt;
&lt;p&gt;尽管如此，这项技术随着时间的发展已经变得非常成熟，显示效果非常地好。直到智能手机发明后的好一段时间大家发现，手机的主要耗电都放在了屏幕上，而手机的电池又不那么够用。我们急需一项新技术来改进我们显示的功耗。&lt;/p&gt;
&lt;h3 id=&quot;OLED-——-更低的成本，更大的应用可能&quot;&gt;&lt;a href=&quot;#OLED-——-更低的成本，更大的应用可能&quot; class=&quot;headerlink&quot; title=&quot;OLED —— 更低的成本，更大的应用可能&quot;&gt;&lt;/a&gt;OLED —— 更低的成本，更大的应用可能&lt;/h3&gt;&lt;p&gt;我们之前说到 LED 决定颜色的主要关键在于材料，但我之前也说我们发现了超过 20 种无机材料，无机材料简单来说就是一些合金，组合的数量其实很少，可供选择的改进很少，已有的选项生产成本都不低。然而这时候我们需要谈到一个人，他叫做邓青云，他出生于英属香港，后在英属哥伦比亚大学得到化学理学士学位，后进入康奈尔大学获得物理化学博士学位，之后于 1975 年进入柯达公司 Rochester 实验室工作。在实验中意外发现了一些有机材料也可以成为这样的材料。OLED 使用了有机化合物作为半导体材料，工艺简单、成本低廉甚至还能用印刷方式制造。这意味着我们可以用 OLED 印刷出一个大面积的发光面。&lt;/p&gt;
&lt;p&gt;这些特性都是传统 LED 没有的。我们用红色、绿色、蓝色的 OLED 通过印刷方法就能得到一个很大的屏幕，通过电信号单独控制每个灯，我们就能精确发出光的亮度。在显示黑色的时候耗能几乎是 0，发光不透过彩色贴纸、不透过液晶、没有荧光粉，简直就是我们继续要找的这么一款用来做手机显示器的卓越材料。&lt;/p&gt;
&lt;h3 id=&quot;下篇预告&quot;&gt;&lt;a href=&quot;#下篇预告&quot; class=&quot;headerlink&quot; title=&quot;下篇预告&quot;&gt;&lt;/a&gt;下篇预告&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;AMOLED 与 PMOLED 的区别在于有没有 TFT（我并没有在开玩笑）&lt;/li&gt;
&lt;li&gt;Super AMOLED 与 OGS、InCell、OnCell&lt;/li&gt;
&lt;li&gt;拜耳阵列与 Pentile 排列的发展&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;从 LED 聊到 Super AMOLED&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="科普" scheme="http://blog.heckpsi.com/tags/%E7%A7%91%E6%99%AE/"/>
    
      <category term="Samsung" scheme="http://blog.heckpsi.com/tags/Samsung/"/>
    
      <category term="SuperAmoled" scheme="http://blog.heckpsi.com/tags/SuperAmoled/"/>
    
  </entry>
  
  <entry>
    <title>支持平权支持的是什么？</title>
    <link href="http://blog.heckpsi.com/2015/06/27/what-is-equal-rights/"/>
    <id>http://blog.heckpsi.com/2015/06/27/what-is-equal-rights/</id>
    <published>2015-06-27T12:15:12.000Z</published>
    <updated>2016-04-23T13:16:41.000Z</updated>
    
    <content type="html">&lt;div class=&quot;tip&quot;&gt;&lt;br&gt;&lt;br&gt;平权运动，无论是女权运动也好、黑人解放运动也好，还是同性婚姻合法化也好，其实归根究底平的是两件事 —— 人权（民权）。&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;说到人权，我们很容易想到 1776 年美国的《美国独立宣言》、1789 年法国的《人权与公民权宣言》和 1948年联合国大会批准的《世界人权宣言》。其实追溯起来，最早的有关人权的法案可以追溯到公元前六世纪的《居鲁士文书》，即居鲁士大帝宣布释放所有奴隶回乡。当我们谈到人权的时候，我们想到的通常是这些法案和文书。但是实际上人权本身和任何法案和文书都没有关系，也就是说人权本身具有普世性，每个人都应该享有人权，法律只不过是约束的一种形式而已。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;平权&quot;&gt;&lt;a href=&quot;#平权&quot; class=&quot;headerlink&quot; title=&quot;平权&quot;&gt;&lt;/a&gt;平权&lt;/h4&gt;&lt;p&gt;《美国独立宣言》中的一句话很好的概括了人权的内容：All men are created equal. 人人生而平等。人权指的是个人或群体作为人类本身即享有的权利，每个人都应该享受相等的权利。不过需要注意的是，无论是《美国独立宣言》还是《人权与共民权宣言》当时都是将人权限定在男性公民上，即把女性和奴隶排除在外。然而正如我们之前所说，法律不过是约束的形式，这并不影响女性和奴隶理应享受和其他人一样的权利。人权的一般定义中包括了：生命权、自由权、财产权、尊严权、获助权、公证权和受教育权利。展开的话其实内容更加丰富。而民权则是人权更进一步的内容，即 “公民” 的法定权利。通常我们通常将它和人权放在一起谈。因为他们之间在实际情况下的界限并不是非常分明。&lt;/p&gt;
&lt;p&gt;支持平权的基础是承认人本身的差异性。人类存在男性、女性、跨性别人。你不能只认准男性作为人类的代表，从而歧视女性和跨性别人。就好像世界上存在单眼皮的人和双眼皮的人，他们都是人类组成的一部分，你不能认准某一种眼皮的人是 “正确” 的，而去歧视另一部分人。这就是所谓平权的意义，使得地球上人人享有的人权相等。&lt;/p&gt;
&lt;p&gt;举个例子来说，在美国女权主义运动的过程中，一些女权组织禁止男性在他们的组织内工作。然而，这并不是平权的一部分，因为在平权过程中，男性应该和女性享有同等的工作权利，而不是以女性可以工作来替代男性可以工作。&lt;/p&gt;
&lt;p&gt;同样地，在近年来非常受到关注的同性婚姻合法化运动中，人们希望同性恋能够和异性恋一样享受相同的婚姻家庭权利。正因为婚姻家庭权利是人权，是每个人都应该享受的权利，无关于家庭的结合是同性还是异性。（在此事件上的许多美国反对者的观点通常打的是对于家庭的定义、对于婚姻的定义，因为在这两者的定义上，人通常认为异性结合的才是婚姻或者家庭，而且这上面也没有明确的定义，这确实是一个值得斟酌的点，也是争论的焦点。这也是为什么美国最高法院在昨天以 5：4 这样微弱的差距通过了同性婚姻法案。）&lt;/p&gt;
&lt;h4 id=&quot;那为什么还会要区分-XX权-呢？&quot;&gt;&lt;a href=&quot;#那为什么还会要区分-XX权-呢？&quot; class=&quot;headerlink&quot; title=&quot;那为什么还会要区分 XX权 呢？&quot;&gt;&lt;/a&gt;那为什么还会要区分 XX权 呢？&lt;/h4&gt;&lt;p&gt;于是问题来了，既然追求的核心是平权，那为什么我还要区分对待。比如将女权、同性婚姻权分离出来来看呢？&lt;/p&gt;
&lt;p&gt;这个问题事实上问的相当有水平。因为当我们把这些权利分开来争取的时候，往往容易 “犯错误”。比如上面说过的追求女权的过程中并没有以平权的要求在争取，而是甚至以女权高于男权这样错误的争取方式。这种争取方式其实在现在国内外很多单独的人权组织中都有出现。就好像你不能批评黑人，不能批评女人，不能批评同性恋，不能批评华人，一旦你批评了，明天人权组织就出来说你是歧视他们。&lt;/p&gt;
&lt;p&gt;但事实上平权并不是这样一回事。承认人本身的差异性是平权的根本原因。人和人之间就是存在差异的，就好像黑人从基因上更容易使他们合成白肌，所以黑人就是在运动天赋上有优势，这是不可否认的事实。你不能说追求平等，所以就必须承认各个人种在体力上是完全相等的，这是不正确的，我们只争取权利上的平等，而不是一切的平等，追求的是存在差异的各个不同的人之间平等的权利。所以每个群体肯定也有自己的弱点，我们自然可以批评。这无关于人权。&lt;/p&gt;
&lt;p&gt;类似上面的问题还有 为什么女性可以放产假？&lt;/p&gt;
&lt;p&gt;因为我们承认女性和男性生理上的差异，认识到她们作为女性本身需要这种权利。女权指的是这个，而不是男女平权之后，女性应该和担任相同的工作、享受相同的假期，这本身才是对女性权利的歧视。&lt;/p&gt;
&lt;p&gt;那么我们认清了这个问题，我们来回答为什么还要区分各种人群追求的权利。因为各个人群受到歧视的地方是不同的，所以要进行区分。举例来说，对于女性，她们的生育权、堕胎权、家庭暴力问题、享受产假的权利、性暴力问题等上面更为关注，而这些问题是其他群体不会或者不容易遇到的，所以需要分开来具体看，具体争取。&lt;/p&gt;
&lt;p&gt;另一点则是出于具体的原因。比如比尔盖茨梅琳达基金会近年来长期呼吁同性恋平权的一大原因是男同性性行为是目前许多地区（包括中国）传播艾滋病的一大途径。出于人生命权的考虑，我们可以优先呼吁男同性恋平权。男同性恋不会因为社会的不承认而不存在，相反，社会的不承认会使得他们的关系从地上走到地下，缺乏基本的安全措施。如果男同性恋能更好被社会承认，男同性恋的性行为可以更好地被规范，可以大大降低国内艾滋病的发病率。&lt;/p&gt;
&lt;h4 id=&quot;既然我们支持的是平权，那么为什么我们还要支持说类似于-我是XX我自豪-这样的言论呢？&quot;&gt;&lt;a href=&quot;#既然我们支持的是平权，那么为什么我们还要支持说类似于-我是XX我自豪-这样的言论呢？&quot; class=&quot;headerlink&quot; title=&quot;既然我们支持的是平权，那么为什么我们还要支持说类似于 我是XX我自豪 这样的言论呢？&quot;&gt;&lt;/a&gt;既然我们支持的是平权，那么为什么我们还要支持说类似于 我是XX我自豪 这样的言论呢？&lt;/h4&gt;&lt;p&gt;我是 XX 我自豪（XX Proud）。这个问题也是平权中经常被问到的问题。比如，你可以说：我是黑人我自豪，或者我是同性恋我自豪。这通常被认为是政治正确的。但如果你说我是白人我自豪，或者我是异性恋我自豪则会被认为是歧视。&lt;/p&gt;
&lt;p&gt;这其实是因为上述例子中黑人或者同性恋在当前社会下是弱势群体。鼓励说我是 XX 我自豪并不是认为 XX 比其他人群拥有更高的等级，而是其在弱势的情况下，社会的舆论下依然愿意公开承认自己，承认自己的不同，承认自己与别人的差异，这一点非常勇敢和理性，所以才值得被鼓励。这句话其实更应该理解成 我不因为我是 XX 而自卑。&lt;/p&gt;
&lt;p&gt;承认人和人本身的不同，愿意公开承认人和人本身的不同。这一点才是被鼓励的。&lt;/p&gt;
&lt;h4 id=&quot;然而现实是极其残酷的&quot;&gt;&lt;a href=&quot;#然而现实是极其残酷的&quot; class=&quot;headerlink&quot; title=&quot;然而现实是极其残酷的&quot;&gt;&lt;/a&gt;然而现实是极其残酷的&lt;/h4&gt;&lt;p&gt;现实永远是很残酷的，各种平权运动的进展通常都不顺利。我们在一开始说过，人权是具有普世性的，法律不过是约束其的手段。即使《同性婚姻法案》在美国被通过，并不代表美国人民就完全接受了同性恋。这就好像当年林肯 1862 年签署了《奴隶解放宣言》之后，黑人依然长期被歧视。一直到 20 世纪中叶美国一系列民权运动者的努力下，黑人才逐渐获得越发平等的权利。私以为中国的女权也处于一个法律保护但文化思想上接受程度非常糟糕的程度。&lt;/p&gt;
&lt;p&gt;社会的接受比法律的接受更加重要，也更加难争取。这就好像很多孩子看了两部 BL 的作品就天天把基挂在嘴边，好像非常支持同性恋一样，但等他们看到俩大叔抱在一起的时候却做出恶心的表情。你可以问自己这样的问题：如果你有一个哥哥或者弟弟而他是一名同性恋，你是否能接受。如果单纯在法律上被接受然而在心理上没有接受的话，平权并不是真正的成功。刚刷人人的时候看到有人举例说可能孩子以后会要挟说 “不给我买肾6，我就找个同性结婚去。” 而这正是这个问题的实质。无论是孩子还是父母都不从心理上接受同性恋是正常的，所以才可以进行要挟。&lt;/p&gt;
&lt;p&gt;心理上的接受是很多人难以逾越的一道坎，这加剧了平权运动推进的难度。加上人们长期以来的经验认识更是容易加剧这种印象。就好像有人会说出 “女人天生就不应该外出工作。” 这样子的话，这句话缺乏基本的逻辑支持，但是却是这个人的固有印象。人们曾经也把物体掉落和重量相关当作固有印象，但是通过实验可以很好的证明他们的错误。但权利这个问题非常的抽象，矫正一个人的观念非常难。甚至 “少数者” 在许多情况下会被理解成病态，就像同性恋在长期都被认为是一种疾病，性别认知障碍也长时间被认为是一种疾病。这对于他们的平权难度更加高。&lt;/p&gt;
&lt;h4 id=&quot;相信，现实也许是非常美好的&quot;&gt;&lt;a href=&quot;#相信，现实也许是非常美好的&quot; class=&quot;headerlink&quot; title=&quot;相信，现实也许是非常美好的&quot;&gt;&lt;/a&gt;相信，现实也许是非常美好的&lt;/h4&gt;&lt;p&gt;每个人有各自的不同，有各自的差异。人类在过去只有繁重体力劳动，女性在当时很难争取到工作权是客观原因。而到现在，我们的工作愈发多样，人的生活本身也愈发多样。你的性别、你的肤色、你的性取向似乎都不会影响你找一份适合的工作。有了工作，人有基本的生存的能力，我始终相信坚持下去什么都会有的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;平权一定是会有的吧。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HeckPsi 长期支持 LGBT 平权、女性平权及其它人权平等。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;div class=&quot;tip&quot;&gt;&lt;br&gt;&lt;br&gt;平权运动，无论是女权运动也好、黑人解放运动也好，还是同性婚姻合法化也好，其实归根究底平的是两件事 —— 人权（民权）。&lt;br&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;说到人权，我们很容易想到 1776 年美国的《美国独立宣言》、1789 年法国的《人权与公民权宣言》和 1948年联合国大会批准的《世界人权宣言》。其实追溯起来，最早的有关人权的法案可以追溯到公元前六世纪的《居鲁士文书》，即居鲁士大帝宣布释放所有奴隶回乡。当我们谈到人权的时候，我们想到的通常是这些法案和文书。但是实际上人权本身和任何法案和文书都没有关系，也就是说人权本身具有普世性，每个人都应该享有人权，法律只不过是约束的一种形式而已。&lt;/p&gt;
    
    </summary>
    
    
      <category term="LGBT" scheme="http://blog.heckpsi.com/tags/LGBT/"/>
    
      <category term="女权" scheme="http://blog.heckpsi.com/tags/%E5%A5%B3%E6%9D%83/"/>
    
      <category term="权利" scheme="http://blog.heckpsi.com/tags/%E6%9D%83%E5%88%A9/"/>
    
  </entry>
  
  <entry>
    <title>流量 “降价” 真假背后的疑团</title>
    <link href="http://blog.heckpsi.com/2015/05/15/things-behind-price-down-of-data/"/>
    <id>http://blog.heckpsi.com/2015/05/15/things-behind-price-down-of-data/</id>
    <published>2015-05-15T14:46:09.000Z</published>
    <updated>2016-04-23T13:11:36.000Z</updated>
    
    <content type="html">&lt;p&gt;在李克强几次三番的督促下，中国三大电信运营商制定出了他们的流量降价策略。在网民一片叫好的背后，事情真的是那么简单吗？李克强的几句话是真的促成了运营商的降价惠及了广大消费者？还是把朝三暮四和朝四暮三这样偷梁换柱的把戏呢？&lt;/p&gt;
&lt;p&gt;要回答这个问题，我们要从一个非常重要的问题出发，流量“降价”究竟谁获利了？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;说到流量降价，我们第一个能想到的当然是消费者获利了。要么是同样多的流量现在更便宜了，或者是同样多的钱可以买到更多的流量了。但实际上真的是这样吗？我们以中国移动的流量改革为例，推出了 10 元 1GB 的夜间流量包、假日流量包，以及 50 元 2GB 的全国流量包。以最后一个全国流量包为例，0.025 元/MB 的资费和之前移动的 4G 资费基本持平，甚至还并不是最便宜的价钱。而前两个套餐基本属于摆设。晚上在家睡觉 Wi-Fi 用的好好的，4G 流量我还嫌 LTE 网络费电呢！从这个角度来看，消费者并没有实际获取到利益，流量什么价钱基本没有变化，日常在流量上的花费不会减少。&lt;/p&gt;
&lt;p&gt;终端用户没有获取到实际的利益，那么运营商获利了？可能。如果消费者和朝三暮四故事里那 “众狙皆伏而喜” 的猕猴一样愚蠢那么运营商倒是确实可以多赚钱。因为消费者以为已经便宜了，可能会购买新的根本没有什么用的套餐。但我相信，消费者也不至于那么愚蠢。毕竟这每个月网费可是实实足足的数目，多了少了自己心里最清楚。&lt;/p&gt;
&lt;p&gt;那么最终获利的是谁呢？排除掉消费者和运营商，最终获利的很容易判断出来，那就是政府。这点听起来似乎不太对，政府督促运营商网费下降怎么最后获利的是政府了呢？我们来思考一下。李克强督促运营商降价，你觉得李克强是不是在为消费者着想，你是否感觉到了政府的 “作为”，加强了对政府的信赖？但相反，运营商最后没有达到实际的降价你责怪的是李克强吗？不，你责怪的是运营商。你觉得运营商应付国家、忽悠用户，运营商背下了沉重的黑锅而政府却收获了信任，看起来是多么地和谐啊~&lt;/p&gt;
&lt;p&gt;但我们仔细分析一下这件事情的来龙去脉究竟是谁才应该背下这口锅？这个问题的核心在于，运营商为什么嘴上答应着降价，实际却没有什么作为呢？翻开中国移动 2014 年的 &lt;a href=&quot;http://www.chinamobileltd.com/sc/ir/reports/ar2014.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;年报&lt;/a&gt; ，我们似乎可以寻找一点答案。首先，中国移动作为国企，但并不是完全的国有资本，它是股份制的上市公司，采取资本的运作方式，作为公司，它也是要自负盈亏的。&lt;/p&gt;
&lt;p&gt;2014 年全年中国移动运营支出 5241 亿人民币，收入 6414 亿人民币。有媒体报道中国移动每天净赚 3 亿这件事确实不假，但看看这个基数，其实也很正常。但问题是，这里面的钱具体是怎么回事呢？收入的最大大头是语音通讯和短信这样的基础通讯业务，收入 3089 亿人民币。而数据业务，也就是我们平时的流量业务，收入 2530 亿人民币。听起来是不是很大，但是我们同时来看一下，支撑流量业务的 4G 基站、传输网等的建设投入了多少？资本支出 2135 亿元。这部分并没有计入运营支出中，如果算上的话，其实 2014 年中国移动是严重亏损的，但不过这些建设都属于资产，除了折旧部分计入成本确实也不该计入进去。流量业务收入 2530 亿，然而建设网络就花去了 2135 亿，丝毫没有见到这是暴利。很多人说，4G 网络建设是一次性投入，但事实上每年还需要维护、耗电，而且近几年 4G 网络基础建设还会继续推进，花钱根本停不下来。&lt;/p&gt;
&lt;p&gt;那么第一个问题来了？成本为什么压不下来？&lt;/p&gt;
&lt;p&gt;这个问题的答案得问工信部。2008年，工信部以 “平衡三家运营商实力” 为由，将最不受国际接受的 3G 标准 TD-SCDMA 颁发给中国移动，导致大量用户有网无机，根本换不上支持这种制式的手机。同时把最受国际接受的 WCDMA 标准颁发给了当时最弱的中国联通。但 WCDMA 是国外的标准，整个标准框架下包含了大量海外专利，建造成本比较高。所以当时，移动 3G 看似资费便宜，实际没法用，联通 3G 资费较贵，用户不敢用，这导致中国 3G 产业发展实际上非常慢。&lt;/p&gt;
&lt;p&gt;然而当工信部颁发了 4G 牌照之后，移动立马停止了这个光会花钱而赚不到钱的 TD-SCDMA 基站的建设，全面推进 4G 网络建设，因为输了 3G 的移动，已经不能再输 4G 了。同样，其它运营商则绞尽脑汁从别的方面着手，比如联通和电信大量试点 FDD-LTE 标准来支持更多海外手机以占据市场。在这种高密集的基站建设下，流量成本只会提升不会下降。但是相反的，4G 流量不但不比 3G 流量贵，反而更便宜。事实上，4G 流量的价格和海外比起来并不昂贵，而是和海外是基本持平的，考虑到之前 3G 事件引发各运营商疯狂地建基站计划，成本比海外更高，盈利空间非常小，很难挤压出降价的区间，并不能以国内消费水平低就一概而论 4G 就是有降价空间的。&lt;/p&gt;
&lt;p&gt;那么也就是说，政府在运营商无力降价的情况下要求降价，这点又是做给谁看的呢？&lt;/p&gt;
&lt;p&gt;做给猴看的。虽然运营商已经花了很大的努力使得价格降到和海外差不多，但无法更 “接地气”，这问题是谁造成的？是国家政府的决策部门，是颁发牌照负责监管的 “工信部”，做出了错误的决定，导致了严重的后果。但是国家并不承认，而是把责任推脱给运营商，称 “为什么不能更便宜？” 如果我们是自由的市场经济，当然可以便宜。但在一个被看似暴利垄断的通讯行业，在一次次的放权后，每个运营商早已褪去了过去的光环，已经沦落为只不过是给政府打工的的打工仔，究竟是谁不想降价呢？谁降价谁就有更多用户占得更大的市场，谁不想呢？&lt;/p&gt;
&lt;p&gt;而消费者确实觉得价格不够接地气，那么他们会责怪谁？再联系到今年整体疲软的中国经济、并不很成功的自贸区试验、试图搞虚拟运营商实际上却没有给他们足够权限、产业转型开展也并不顺利。不作为、无能的政府？很可能。那么在此之前，先做出总理多次批示降价，而运营商不作为这样一出戏出来，煽动舆论压力，转移消费者的怒火，把这种不满发泄在运营商上。这可真是一场好戏啊。&lt;/p&gt;
&lt;p&gt;从这种角度上面来看，只有放开真正的市场自由才能从根本上解决问题。否则就算今天 4G 资费是真降，明天 5G 照样给你涨回来。放开运营商的牌照限制？放开基础设施建设的限制？自贸区放开了文化部跟着一起放开？从技术资金上去扶植产业转型而不是靠处罚和税收？只有这些才能从根本上解决问题。&lt;/p&gt;
&lt;p&gt;否则的话，那只能是一个个美好的卫星，和一张张美好的空头支票。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在李克强几次三番的督促下，中国三大电信运营商制定出了他们的流量降价策略。在网民一片叫好的背后，事情真的是那么简单吗？李克强的几句话是真的促成了运营商的降价惠及了广大消费者？还是把朝三暮四和朝四暮三这样偷梁换柱的把戏呢？&lt;/p&gt;
&lt;p&gt;要回答这个问题，我们要从一个非常重要的问题出发，流量“降价”究竟谁获利了？&lt;/p&gt;
    
    </summary>
    
    
      <category term="通讯" scheme="http://blog.heckpsi.com/tags/%E9%80%9A%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>杀毒软件的免费化与流氓化</title>
    <link href="http://blog.heckpsi.com/2015/05/03/anti-virus-softwares-in-china/"/>
    <id>http://blog.heckpsi.com/2015/05/03/anti-virus-softwares-in-china/</id>
    <published>2015-05-03T08:41:48.000Z</published>
    <updated>2016-04-23T13:03:22.000Z</updated>
    
    <content type="html">&lt;p&gt;我至今还记得在 12 年前，当我第一次在一台赛扬3的机器上安装上金山毒霸 2003 之后的情形。这个杀毒软件也不过几个按钮，杀毒的时候我的电脑也不卡，半个小时可以扫描完一个 20G 的硬盘，没有弹窗也没有广告，不过倒是需要付费买下 CD-Key。&lt;/p&gt;
&lt;p&gt;我也记得 12 年前，当我第一次在这台机器上莫名其妙安装上了 3721 上网助手的情形。打开 IE 浏览器的速度明显变慢了，还多了奇奇怪怪的启动项。不过我并不很讨厌这个插件，它看起来很酷，也挺有意思，虽然不怎么用。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;这是最好的时代，也是最坏的时代。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;—— 查尔斯·狄更斯《双城记》&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;2008 年的时候，我第一次认识了那个还在测试版本的 360 杀毒。这是中国杀毒软件中第一个敢于做免费的。测试版本的 360 杀毒非常轻，软件一共只有寥寥几个界面，使用的是 BitDefender 的查杀引擎，查杀的效果其实还挺不错。在 1.0 版本发布之后，360 也加大了宣传力度，一度以“免费”的概念打入市场，并且获得了非常大的市场占有。&lt;/p&gt;
&lt;p&gt;为了与之竞争，瑞星、金山等大量杀毒软件厂商也将自身产品免费化了。但是，问题来了，杀毒软件凭什么可以免费？&lt;/p&gt;
&lt;p&gt;当然，各大厂商会用一个非常通用的理由来给你解释：这个叫“互联网思维”。互联网本身就应该是产品免费的，通过基于免费产品的拓展服务来盈利，最大的例子就是 Google，搜索功能本身是免费的，而通过基于搜索的广告服务来实现盈利。这个理由听起来非常有道理，但是仔细想想其实漏洞百出。搜索引擎可以通过学习用户的搜索习惯来了解用户的需求，发现潜在的消费目标，推出合适的广告。那杀毒软件学习什么呢？学习用户中过的病毒可以用来推送广告？广告又推送在哪里呢？要知道搜索引擎通常实在浏览器前端运行的，而杀毒软件总是在系统后台默默运行的啊，没有展示的地方啊。&lt;/p&gt;
&lt;p&gt;拥有庞大装机量之后的 360 给我们展示了，什么是杀毒软件的“互联网思维”。360 最嚣张的时候莫过于 2011 年上市先后。通过给用户弹出弹窗，提示用户使用的 QQ 存在风险，要求用户下载安装 360 扣扣保镖，然后通过所谓“扫描”后提示 QQ 监控用户隐私文件，然后提示用户启用保护，阻止 QQ 对硬盘进行读取操作，同时屏蔽 QQ 的广告、迷你新闻等功能，还用户一个安全的“QQ”。&lt;/p&gt;
&lt;p&gt;这件事便是 3Q 大战的开始。一个长期静默在后台的“杀毒”软件，可以对用户病毒以外的程序进行直接的干涉，影响其他产品的正常运行。通过推送服务，使得自身其他产品快速获得高市场占有率，通过别的产品和服务来实现盈利。没错，杀毒软件的运行方式非常底层于系统，事实上他们可以干涉你系统里的任何东西，成为了你操作系统里的“老大哥”。&lt;/p&gt;
&lt;p&gt;之后的很多东西我们也能看到这种方式的影子，比如通过弹窗推送安装 360 浏览器、360 手机助手，使得在前端业务的市场占有极快提升。装一个 360，莫名其妙就把 360 全家给装上了。再通过广告等方式实现盈利。同样地，从收费走向免费的金山杀毒也开始弹出广告、弹出金山手机卫士、猎豹浏览器等服务来实现其业务的快速扩张。&lt;/p&gt;
&lt;p&gt;所以，以 2011 年可以做一个很明确的分界线。2011 年以前，上网中病毒、中流氓插件，2011年以后，上网中杀毒软件、中安全卫士。毕竟原来写病毒的都嫌弃病毒来钱慢都去搞流氓安全软件去了。&lt;/p&gt;
&lt;p&gt;但不得不说，这种模式虽然非常恶心，但却是非常精明的“生意人”，2011 年 360 在美国上市，2014 年猎豹在美国上市，这一个个发展飞快。但是这些软件在弹窗和推送中夹杂的“忽悠”用户下载其他软件的内容也并不完全没风险。2012 年 360 所有 iOS 手机端应用因被苹果查出刷票行为，被全面下架处理。2013 年 360 手机端产品再次因为涉及用户隐私等原因再遭苹果市场下架，并导致国家工信部介入调查。同样的，猎豹清理大师因为恶意推送广告，也遭到了 Google Play 市场下架。这些也都是流氓行为背后的问题。&lt;/p&gt;
&lt;p&gt;这时候我们看看中国的杀毒软件市场，注重技术研发的比如微点一个个入不敷出面临倒闭，一个个流氓运营的却如风顺水。反观国外市场，通常有面向个人用户的免费提供基本杀毒功能的产品比如微软MSE、小红伞免费版、Avast免费版，有面向更复杂需求的付费版本。至少没见到过一天到晚弹窗的。并且做杀毒软件的，也更倾向于提高杀毒软件的技术水平而不是横向扩展。&lt;/p&gt;
&lt;p&gt;所以杀毒软件在中国并不是走向了免费化，只不过是走向了流氓化，所谓，免费的才是最贵的。&lt;/p&gt;
&lt;p&gt;但今年最让人不可思议的是 360 被三大杀毒软件评测机构宣布在测试中存在舞弊行为，被撤销了认证。可能很多同学并不清楚这些测试机构是什么。他们每年会收集最新的病毒样本，然后测试杀毒软件的两个参数：是否能够查杀出全部的病毒？是否会将正常文件误判成病毒？360 被称舞弊是因为，在送去测试版本的 360 杀毒中默认打开了 BitDefender 引擎，查杀率 100%，误杀率 0%，被颁发了认证。但是，在 360 官网上下载的版本默认是关闭 BitDefender 引擎的，查杀率明显降低，误杀率明显提高，所以被称为舞弊。当然，360 之所以要关闭原因是显然的，BitDefender 引擎对资源消耗非常大，而 360 面向的用户中许多人电脑配置糟糕，根本没法打开这引擎。但是为了取得好的测试成绩，在送测时把这引擎打开了。这样的测试结果根本不真实，代表不了 360 杀毒在用户机器上运行的实际情况。&lt;/p&gt;
&lt;p&gt;这样的事情其实原先我是理解的，这毕竟和 360 面对的市场有关系。但是不可思议的是，360 随后发表了声明 &lt;a href=&quot;http://weibo.com/p/1001603838152715428532&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《传统杀毒评测标准落后云时代，我们宣布退出AV-C》&lt;/a&gt;。这就变得非常让人震惊了。如果你说考试制度不合理，你拒绝参加考试，我觉得也是可以理解的。但实际问题是你被抓出了考试作弊，然后你说考试要抓作弊这事不合理你要拒绝考试，这简直是滑天下之大稽！&lt;/p&gt;
&lt;p&gt;我们再反观这里面的逻辑，传统杀毒评测标准落后云时代。传统病毒评测标准就是两点：查杀率和误杀率。难道云时代的杀毒软件是可以在这两件事上放水的吗？而且这份声明也十分可笑。比如里面说 360 在送测版本中没有任何作弊行为，问题是作弊都被抓了现行竟还说没有作弊也是非常不可思议。再比如里面举例说病毒可以恶意操作 TeamViewer，所以理应把 TeamViewer 当病毒处理，这更是可笑。TeamViewer 本身又没有安全性问题，你要当病毒处理的是捆绑在 TeamViewer 上的病毒程序啊，你把整个 TeamViewer 当病毒了竟然还有理了，那你为什么不把同样拥有远程操作功能的 QQ 给当病毒处理了？全篇偷换概念玩得非常溜，也是要为 360 公关部门的水平要给出满分。&lt;/p&gt;
&lt;p&gt;那么所谓云时代的标准又是什么呢？是对未知病毒行为进行预测还是基于 P2P 的病毒库？我想恐怕还没有定论，反正无论哪个 360 都没做好。360 口中的云时代反大概是不停运用“云服务”给你推送其它软件的云流氓标准吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我至今还记得在 12 年前，当我第一次在一台赛扬3的机器上安装上金山毒霸 2003 之后的情形。这个杀毒软件也不过几个按钮，杀毒的时候我的电脑也不卡，半个小时可以扫描完一个 20G 的硬盘，没有弹窗也没有广告，不过倒是需要付费买下 CD-Key。&lt;/p&gt;
&lt;p&gt;我也记得 12 年前，当我第一次在这台机器上莫名其妙安装上了 3721 上网助手的情形。打开 IE 浏览器的速度明显变慢了，还多了奇奇怪怪的启动项。不过我并不很讨厌这个插件，它看起来很酷，也挺有意思，虽然不怎么用。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;这是最好的时代，也是最坏的时代。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;—— 查尔斯·狄更斯《双城记》&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="杀毒软件" scheme="http://blog.heckpsi.com/tags/%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="安全" scheme="http://blog.heckpsi.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>从 “没有响应” 说到哥德尔不完备定理</title>
    <link href="http://blog.heckpsi.com/2015/04/27/from-no-response-to-godels-incompleteness/"/>
    <id>http://blog.heckpsi.com/2015/04/27/from-no-response-to-godels-incompleteness/</id>
    <published>2015-04-27T12:15:54.000Z</published>
    <updated>2016-04-23T12:57:33.000Z</updated>
    
    <content type="html">&lt;p&gt;当你看到窗口的标题栏上出现了 “没有响应” (No Responding) 四个字，电脑陷入了莫名的卡顿的时候，你一拍脑袋，大喝一声 “又死机了！” ，点下结束进程的你是否想过，这玩意，真的死机了吗？有时莫名卡顿了几分钟后，程序又莫名其妙恢复正常了。这又是什么情况呢？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;首先，我们先来理解一下，什么是 “没有响应”，&lt;a href=&quot;http://windows.microsoft.com/zh-cn/windows-vista/what-does-it-mean-when-a-program-is-not-responding&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微软&lt;/a&gt; 的官方帮助告诉我们：表示该程序与 Windows 的连接速度比平常慢，一般原因是程序中出现问题。如果我们深入理解一下的话，我们可以先考虑一下带窗口界面的程序通常的运行形式。&lt;/p&gt;
&lt;p&gt;一个程序通常可以拥有很多线程，意味着它可以同时干很多事。然而通常只有主线程是可以用来更新窗口上显示的内容的，别的线程只能在背后默默进行计算、网络通讯等其它工作。对于同一个线程，一次只能干一件事。主线程虽然更新界面，但大多数情况下，它也会进行一些运算。但如果这个线程长达数秒都迟迟无法更新界面，也就是说这个线程在运行某些内容时阻塞了，系统就会认为这是程序 “没有响应” 了。没有响应通常有两种可能性，第一种是程序运行出现了死循环，怎么也跑不出来了，这就是我们常说的死机。为了帮助大家理解这种 “死循环”，大家可以思考一下下面这个程序：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;第一步：运行 1+x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第二步：如果上一步运行结果是2，那么重新运行第一步&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;第三步：显示结果&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;非常显然，当 x=1 时，这个程序将无限在一二步中循环，这就是传说中的死循环。死循环会导致主线程阻塞（如果这个运算在主线程执行的话）。这就会出现 “没有响应” 的情况。&lt;/p&gt;
&lt;p&gt;当然造成 “没有响应” 并不止这一种可能，另一种可能那就是主线程真的在执行某个计算很费时的运算。比如运算小于 10000000000000 的所有素数，这由于算的时间太长也会阻塞主线程，导致 “没有响应”。不过这种阻塞是暂时的，并不是真正的死循环，稍等片刻也是可以解出来的。&lt;/p&gt;
&lt;p&gt;然而，为什么系统不能区分出这两种阻塞哪一种是真正的死循环而哪一种只是运算太慢了呢？因为。。。真的不能。。。区分。。。&lt;/p&gt;
&lt;p&gt;这种 “不能”，是数学意义上证明的，它就是不能。&lt;/p&gt;
&lt;p&gt;给出这个证明的是年仅24岁的计算机科学之父——艾伦·图灵，证明这个问题，这篇论文有近40页（&lt;a href=&quot;http://www.cs.virginia.edu/~robins/Turing_Paper_1936.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文&lt;/a&gt;），不过实际上的证明过程，只需要一张纸就能说明了。&lt;/p&gt;
&lt;p&gt;还是以刚刚演示的会死循环的程序为例，显然这个程序在 x=1 时发生死循环，我们记这个程序为 F(x)，当 x=1 时死循环。我们假设存在一个程序能判定程序是不是会死循环，我发这个程序叫 G(f,x)，指该程序可以判定程序f是否在输入x时会死循环。如果判定为死循环就返回1，正常运行就返回0。所以显然 G(F,1) = 1，G(F,2)=0。&lt;/p&gt;
&lt;p&gt;我们现在再构造一个更恶心的函数，它叫 T(f,x)，它内部会先运行 G(f,x)，如果发现 G(f,x) = 1 就正常退出，而如果  G(f,x)=0 时就让自己死循环。&lt;/p&gt;
&lt;p&gt;那么问题来了，T(T,x) 会不会死机呢？&lt;/p&gt;
&lt;p&gt;我们可以假设 T(T,x) 是不死机的，那么意味着 G(T,x) 返回的是1，而 G(T,x) 返回1的前提是 T(T,x) 是死机的，相矛盾，反之同样矛盾。由此证明，一个判断程序是否可能死机的函数  G(f,x) 不存在。&lt;/p&gt;
&lt;p&gt;这就是著名的图灵停机问题，在80年前还没有计算机的时候，图灵就证明了这个问题。&lt;/p&gt;
&lt;p&gt;不过图灵的这个证明恰好证明了另一个问题，那就是希尔伯特的23个问题。这是德国数学家大卫·希尔伯特（David Hilbert）于1900年在巴黎举行的第二届国际数学家大会上所提出23道最重要的数学问题中的第2个问题 —— 算术公理之相容性。这个问题其本质是希望找到一个方法证明任意公理系统的内部是不矛盾的。&lt;/p&gt;
&lt;p&gt;但实际上是事与愿违的，许多公理系统都是自相矛盾的。图灵的停机问题就是这样一种自相矛盾的一个证明。当然，一些更熟悉更易理解的问题其实也可以证明这样的问题。&lt;/p&gt;
&lt;p&gt;比如最常见的是 罗素悖论 的一个通俗描述，那就是 理发师悖论。一个理发师给所有不给自己理发的人理发，那么他给不给自己理发？这时候无论理还是不理，都是相矛盾的。&lt;/p&gt;
&lt;p&gt;罗素悖论的相对深入的通俗描述可以这么理解：比如一个集合：世界上所有描述它字数少于100字的集合都是这个集合的子集。这个描述本身是完备的，但显然这个集合本身也是自己的子集，并且这个集合包含的还不止有自己集合本身，意味着这个集合本身是自己的真子集，这就是非常荒谬而矛盾的了。&lt;/p&gt;
&lt;p&gt;无论图灵还是罗素提出的悖论都证明了我们的计算系统存在不完备的漏洞，然而 1931 年数学家库尔特·哥德尔给出了更为完整的证明，这个证明直接把这种不完备提升到了一个巨大的前提下：任何相容的形式系统，只要蕴涵皮亚诺算术公理，就可以在其中构造在体系中不能被证明的真命题，因此通过推演不能得到所有真命题（即体系是不完备的）。&lt;/p&gt;
&lt;p&gt;也就是说，任何形式的数学系统，只要包含关于自然数最最基础的公理：皮亚诺公理，那么它就是不完备的，如此残念。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;我看到了它，却不敢相信它。 —— 康托尔&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;当你看到窗口的标题栏上出现了 “没有响应” (No Responding) 四个字，电脑陷入了莫名的卡顿的时候，你一拍脑袋，大喝一声 “又死机了！” ，点下结束进程的你是否想过，这玩意，真的死机了吗？有时莫名卡顿了几分钟后，程序又莫名其妙恢复正常了。这又是什么情况呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="数学" scheme="http://blog.heckpsi.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="算法" scheme="http://blog.heckpsi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS 是如何保证安全的？</title>
    <link href="http://blog.heckpsi.com/2015/04/16/how-https-makes-communication-secured/"/>
    <id>http://blog.heckpsi.com/2015/04/16/how-https-makes-communication-secured/</id>
    <published>2015-04-15T20:21:48.000Z</published>
    <updated>2016-04-21T18:32:11.000Z</updated>
    
    <content type="html">&lt;p&gt;每当我们讨论到信息安全的时候，我们最长接触到的信息加密传输的方式莫过于 HTTPS 了，当我们浏览器地址栏闪现出绿色时，就代表着这个网站支持 HTTPS 的加密信息传输方式，并且你与它的连接确实被加密了。但是 HTTPS 并不是一个单一的东西，它知识我们常见的 HTTP 协议和某个加密协议的一个混合，这个加密协议通常会是 TLS。那么 HTTPS 为什么安全呢？其实我们需要先考虑 HTTP 为什么不安全。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;假设你坐在一个教室里，你现在非常想把某个信息传递给教室里的另一个人，一般来说，会选择，传纸条。传纸条这个比喻其实非常正确，这就是互联网的一个基础协议 TCP/IP 协议基本的工作模式。而通常，HTTP 协议的数据是使用 TCP/IP 协议进行发送的。HTTP 指的是你在纸条上写明你要传送的目的地是哪个同学的坐位，然后再是要传递的内容。途径的同学拿到纸条后根据纸条上显示的地址依次传过去就好了。这样要面临的第一个问题就是：途径的同学可以完全知道你写了什么。&lt;/p&gt;
&lt;p&gt;这就是 HTTP 面临的第一个问题，这个问题通常被叫做 “窃听” 或者 “嗅探” ，指的是和你在同一个网络下或者是途径的路由上的攻击者可以偷窥到你传输的内容。这是 HTTPS 要解决的第一个问题。这种问题通常是通过“加密”来解决的。从非常原始的角度来考虑，其实就是双方约定一个暗号。用什么字母去替代什么字母之类的。不过考虑到互联网每天有无数信息需要加密，这种原始的加密方法似乎不太适合。不过实际上方法也差不多，一般是采用一种叫做 AES 的算法来解决的。这种算法需要一个 密钥 key 来加密整个信息，加密和解密所需要使用的 key 是一样的，所以这种加密一般也被称为“对称加密”。AES 在数学上保证了，只要你使用的 key 足够足够足够足够的长，破解是几乎不可能的。&lt;/p&gt;
&lt;p&gt;我们先假设这种破解确实是不可能的，而且目前也确实没有对 AES 本身能发动起有效的攻击的案例出现。&lt;/p&gt;
&lt;p&gt;我们再回到这个教室，你接着要传小纸条，你把地址写上后，把要传输的内容用 AES 蹭蹭蹭加密了起来。刚准备传，问题来了。AES 不是有一个 key 吗？key 怎么给目的地啊？如果我把密钥直接写在纸条上，那么中间的人不依然可以解密吗？在现实中你可以通过一些其它方法来把密钥安全传输给目的地而不被其他人看见，但是在互联网上，要想这么做难度就很大了，毕竟传输终究要经过这些路由，所以要做加密，还得找一个更复杂的数学方法。&lt;/p&gt;
&lt;p&gt;于是聪明的人们发明了一种更复杂的加密算法——非对称加密。这种加密或许理解起来比较困难，这种加密指的是可以生成一对密钥 (k1, k2)。凡是 k1 加密的数据，k1 自身不能解密，而需要 k2 才能解密；凡是 k2 加密的数据，k2 不能解密，需要 k1 才能解密。这种算法事实上有很多，常用的是 RSA，其基于的数学原理是两个大素数的乘积很容易算，而拿到这个乘积去算出是哪两个素数相乘就很复杂了。好在以目前的技术，分解大数的素因数确实比较困难，尤其是当这个大数足够大的时候（通常使用2的10次方个二进制位这么大），就算是超级计算机解密也需要非常长的时间。&lt;/p&gt;
&lt;p&gt;现在利用这种非对称加密的方法，我们来设想一个场景。你继续想要传纸条，但是传纸条之前你先准备把接下来通讯的对称加密密钥给传输过去。于是你用 RSA 技术生成了一对 k1、k2，你把 k1 用明文发送了出去，路经有人或许会截取，但是没有用，k1 加密的数据需要用 k2 才能解密。而此时，k2 在你自己的手里。k1 送达目的地后，目的地的人会去准备一个接下来用于对称加密传输的密钥 key，然后用收到的 k1 把 key 加密了，把加密好的数据传回来。路上的人就算截取到了，也解密不出 key。等到了你自己手上，你用手上的 k2 把用 k1 加密的 key 解出来，现在全教室就只有你和你的目的地拥有 key，你们就可以用 AES 算法进行对称加密的传输啦！这时候你和目的地的通讯将无法再被任何人窃听！&lt;/p&gt;
&lt;p&gt;当然，这时候你可能会问两个问题。&lt;/p&gt;
&lt;p&gt;既然 非对称加密 可以那么安全，为什么我们不直接用它来加密信息，而是去加密 对称加密 的密钥呢？&lt;/p&gt;
&lt;p&gt;这是因为 非对称加密 的密码对生成和加密的消耗时间比较长，为了节省双方的计算时间，通常只用它来交换密钥，而非直接用来传输数据。&lt;/p&gt;
&lt;p&gt;使用 非对称加密 是完全安全的吗？&lt;/p&gt;
&lt;p&gt;听起来确实是挺安全的，但实际上，还有一种更恶劣的攻击是这种方法无法防范的，这就是传说中的“中间人攻击”。我们继续让你坐在教室里传小纸条。现在你和目的地上途径一个中间人，他有意想要知道你们的消息。由于这个描述比较复杂，我们将你称为 A，你的目的地称为 B，而中间人称为 M。当你要和 B 完成第一次密钥交换的时候，途径了 M。M 知道你要进行密钥交换了，它把小纸条扣了下来，假装自己是 B，伪造了一个 key ，然后用你发来的 k1 加密了 key 发还给你，你以为你和 B 完成了密钥交换，实际上你是和 M 完成了密钥交换。同时 M 和 B 完成一次密钥交换，让 B 误以为和你完成了密钥交换。现在，由 A -&amp;gt; B完整的加密，变成了 A（加密连接1） -&amp;gt; M（明文）-&amp;gt;B（加密连接2）的情况了。这时候 M 依然可以知道 A 和 B 传输中的全部信息。&lt;/p&gt;
&lt;p&gt;对于这种事，我们似乎很难找到一个解决方法来解决这个问题，除非我们能从源头保证，你密钥交换的对象是安全的。这时候我们就要认识互联网 HTTPS 和你传纸条的微妙区别了。你传纸条时，你和你的目的地的关系几乎是对等的。而你访问网站时，你访问的对象通常是一个比较大的服务供应商，他们有充沛的资源，也许可以证明他们的合法性。&lt;/p&gt;
&lt;p&gt;这时候我们会引入一个第三方叫做 CA。CA 是一些非常权威的专门用于认证一个网站合法性的组织。服务商可以向他们申请一个证书，使得他们建立安全连接时可以带上 CA 的签名。而 CA 的安全性由操作系统或浏览器来认证。你的 Windows、Mac、Linux、Chrome、Safari 等会在安装时带上一个他们认为安全的 CA 证书列表。如果和你建立安全连接的人带着这些人的签名，那么认为这个安全连接是安全的，没有遭到中间人攻击。&lt;/p&gt;
&lt;p&gt;CA 证书通常情况下是安全的。因为一旦某个 CA 颁发出的某个证书被用于了非法用途，浏览器和操作系统一般会通过更新将整个 CA 颁发过的全部证书全部视为不安全。这使得 CA 通常在颁发证书时是比较小心的。&lt;/p&gt;
&lt;p&gt;所以通过 对称加密 + 非对称加密 + CA认证 这三个技术混合在一起，才使得 HTTP 的后面加上了一个 S —— Security。实际上 HTTPS 的协议比我这里描述的更复杂一些，我这里说的主要是基本的实现原理。因为其中任何一环稍有闪失，就会使得整个加密都将变得不安全。这也是为什么 HTTPS 的加密协议从SSL 1.0 升级到 SSL 3.0 再被 TLS 1.0 现在被 TLS 1.2 取代，其背后都是一环环细节上的修改，以防任何地方的闪失。&lt;/p&gt;
&lt;p&gt;但即使如此，你的 HTTPS 尽可能的保证了你传输的安全，但这种安全也不是绝对的。比如 CA 证书出了问题被用于了中间人攻击，在短期内，你的安全将会陷入直接的麻烦直到浏览器或操作系统重新更新了你的 CA 列表或者你手动调整了这个列表。但大多情况下不必杞人忧天，它基本上是安全的。&lt;/p&gt;
&lt;p&gt;当然了，路由也可以选择直接丢包，它看不到的，也不让你看到。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;每当我们讨论到信息安全的时候，我们最长接触到的信息加密传输的方式莫过于 HTTPS 了，当我们浏览器地址栏闪现出绿色时，就代表着这个网站支持 HTTPS 的加密信息传输方式，并且你与它的连接确实被加密了。但是 HTTPS 并不是一个单一的东西，它知识我们常见的 HTTP 协议和某个加密协议的一个混合，这个加密协议通常会是 TLS。那么 HTTPS 为什么安全呢？其实我们需要先考虑 HTTP 为什么不安全。&lt;/p&gt;
    
    </summary>
    
    
      <category term="安全" scheme="http://blog.heckpsi.com/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="HTTPS" scheme="http://blog.heckpsi.com/tags/HTTPS/"/>
    
      <category term="通讯" scheme="http://blog.heckpsi.com/tags/%E9%80%9A%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>混合应用 —— 一场美味却危险的盛宴</title>
    <link href="http://blog.heckpsi.com/2015/04/02/danger-of-hybrid-apps/"/>
    <id>http://blog.heckpsi.com/2015/04/02/danger-of-hybrid-apps/</id>
    <published>2015-04-02T05:18:38.000Z</published>
    <updated>2016-05-15T03:20:12.000Z</updated>
    
    <content type="html">&lt;p&gt;随着 HTML 5 的标准的提出、响应式布局的成熟、许多针对移动优化的网页架构的开源项目的推出，手机浏览器能做的已经远不是以前可以想象的了，它几乎可以做任何事情。所以许多概念认为手机上的浏览器应该起到主要作用，Web App 在手机上的一个用这几年成为了一个热点。Ubuntu Mobile 的手机 ROM 更是以 Web App 作为主要功能，也让人体验到了这种想法的可能性。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;网页最大的优势莫过于灵活，用户不需要去更新新版客户端，只要你后端悄悄上线就行了，甚至不需要有版本号这样可以的东西，并且能在各种平台上兼容，同步更新。容器可以随意变化，可以变身文章阅读器、视频播放器甚至是复杂的3D游戏，可以给应用带来各种各样的变化，而且这种变化是非常灵活的，随时都可以。但是就目前使用最常见的 Android iOS WP 系统而言，浏览器还不足以实现全部的特性以支撑整个系统，比如及时的通知系统、后台系统。&lt;/p&gt;
&lt;p&gt;在这两者的矛盾下，很快就有人提出了混合应用（Hybrid App），这种应用通过系统私有的方法实现一些网页不能完成的事情，把剩下的内容全部用一个网页容器来实现，大大降低了开发成本。即使许多应用不完全采用这种模式，但多少也会整幅地使用 WebView，尤其是来部署一些灵活的活动信息等，比如微信、微博等都多少有这样的方法。&lt;/p&gt;
&lt;p&gt;其实这样的开发虽然降低了复杂度并增加了灵活性，但是其中的安全性却是值得商榷的。比如之前在所有系统版本小于 Android 4.4 的手机上都曝出了 WebView 的 Javascript 注入漏洞，并且 Google 放弃了对这一漏洞的修补，因为认为就安全性而言用户应该先升级到 Android 4.4，无限的向下补丁是不现实的，这么说来也是有道理的。但也使得混合应用的开发存在了一丝疑问。如果这样的漏洞还只是偶然，实际情况中出现的问题常常更为简单，但是却很难想到。&lt;/p&gt;
&lt;p&gt;这一类问题往往出现在 Native - WebView 层上。昨天早上人人网愚人节活动系统曝出了系统漏洞，使得黑客在调用后可以任意以任何用户的身份进行发帖，这实在是愚人不成反被愚。曝出后人人的公关部门进行了紧急的处理制止了事态的进一步扩展，实际上，在4月1日一结束后，人人网草草撤下了页面，因为从技术上来说，修复的可能性非常小。&lt;/p&gt;
&lt;p&gt;为什么非常小呢？其实核心问题在于，如果 WebView 拥有可以发帖的权限时，我们应该如何确认发帖者的身份。这个问题通常是显然的，常用的方法就是 user - token 验证。即验证用户的 id 和登录成功后系统返回的唯一编号是否一致。但是，在混合应用上这一点却存在一定的问题。有时 token 并不直接由网页获取到，而是由客户端的 Native 部分获取到的。那么当它打开 WebView 的时候就需要将这参数传递进去，这通常是通过创建一个 Cookie 来实现的，在技术上也没有问题。&lt;/p&gt;
&lt;p&gt;但是实际问题是，什么时候传呢？&lt;/p&gt;
&lt;p&gt;我们继续以昨天人人网的漏洞为例，由于人人在聊天时也可以调用 WebView 来打开第三方的链接，所以就使得传输这个参数成为一个比较难的问题。如果打开第三方链接的时候也把参数传递进去，显然地，我们可以通过伪造一个链接来抓取这个 Cookie 使得 user - token 泄露，实现对用户权限的全部控制，所以是绝对不可取的。所以人人采取的方法是 —— 不传 token。&lt;/p&gt;
&lt;p&gt;不传 token 带来的问题叫做 “死无对证”，用户的ID是可以随便并且非常轻易的伪造的。尤其是当人人今天愚人节活动页面最后会发送一条可编辑的消息到用户网页上时，通过伪造 user 可以对所有用户进行操作，造成了重大安全漏洞的爆发。而且更糟糕的是，传递参数这事是在客户端完成的，如果不更新客户端，就永远不会多传一个参数进来，出了问题也无法及时解决。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.heckpsi.com/1009_1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;（通过绕过 token 可以任意账号发布信息）&lt;/p&gt;
&lt;p&gt;而这一问题同样存在于许多混合应用之中，不过是他们对待 token 的传递处理方式不同，问题的细节上各有差别。那么，我们也可以来思考一下，假如你是人人网的程序员，同时，你也知道不传 token 和见谁都传 token 都是不对的（其实许多应用都是栽在这前两个问题上）。现在要修复这一问题，你会如何重新选择你何时传递 token 参数这一问题呢？&lt;/p&gt;
&lt;p&gt;一、当访问的网址以 &lt;a href=&quot;http://www.renren.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.renren.com&lt;/a&gt; 开始时，将参数传入。&lt;/p&gt;
&lt;p&gt;我想，这是很多人的第一想法。这个方法看起来逻辑是正确的。只有网址以自己网站的目标地址开头时再传，而且这一点是非常容易从 URL 上判断出来的，并且也可以避免访问第三方网站时传入。但是这种方法真的是正确的吗？&lt;/p&gt;
&lt;p&gt;答案是否。如果你这么操作了，其实是你对 http 协议的认识不够完备。显然我可以伪造一个这样的地址 &lt;a href=&quot;http://www.renren.com@heckpsi.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.renren.com@heckpsi.com&lt;/a&gt; 。这个地址也是以自己目标网站开始的，但是用了@符号，这事实上指的是用 www.renren.com 为用户名登录 heckpsi.com 的网站。不信的用户可以复制上面的地址到浏览器里看一下，它绝对会打开 heckpsi.com 的。所以这么操作是不行的。&lt;/p&gt;
&lt;p&gt;二、判断 WebView 访问的目标 Host 是不是 www.renren.com。&lt;/p&gt;
&lt;p&gt;这种方法比上面一种显然更靠谱，因为判断的是目标 Host。像上面这种障眼法是不可能改变实际的目标服务器的。但是这种操作在实现上往往会遇到问题，因为当从一个 URL 变成一个目标 Host 的时候实际上浏览器已经开始了解析的工作，这使得你无法及时传入参数了。这样的实现方法在主流的操作系统上都是非常困难的，因为在运行着的 WebView 上试图再写入数据在安全性上是比较有问题的，操作系统一般也不会允许你这么做。而且这么做也并非完全避开了真正的危险，因为显然这种方法可以被下面这种方法所替代。&lt;/p&gt;
&lt;p&gt;三、通过字符串解析 URL，算出实际的访问地址，再判断。&lt;/p&gt;
&lt;p&gt;这一点其实模拟了浏览器解析 Host 的地址的行为。但解析 URL 这事是否安全本身取决于你解析的方法，当然，我们假设，解析不存在任何问题，它得到了目标的访问地址。这时候再判断一定可以确认用户是否访问的是 www.renren.com 这个地址。这通常来说是安全的了，但是其实还是可以进行攻击的，只不过攻击范围减小了，需要进行路由上的攻击。只要我们将 www.renren.com 的包进行解析商的伪造引向我们的攻击地址，依然可以实现攻击。但是这一点，我认为可以不用很深刻考虑。因为同样我们也能发现，Native 的应用也可以用这种方法进行攻击，已经不是混合应用才有的问题了。&lt;/p&gt;
&lt;p&gt;但是真正的安全是不存在的吗？其实也不见得。对于这种伪造地址的方法最方便的解决方案当然是 HTTPS。至于能解决的原因可以参见&lt;a href=&quot;http://blog.heckpsi.com/2015/04/16/how-https-makes-communication-secured/&quot;&gt;“HTTPS 是如何保证安全的？”&lt;/a&gt; 。HTTPS 可以从根本上杜绝嗅探攻击和中间人攻击。对于所有的敏感数据如密码、token 传输的唯一解决方案只有可靠的加密。相比之下，twitter 全网支持 https 传输，Facebook 全网支持 https 传输，而微博和人人都全部不支持 https 传输，可见安全意识之差。&lt;/p&gt;
&lt;p&gt;所以混合应用增加了一层传输使得安全性上存在未知的隐患。但大多数安全问题并不是出在理论意义的系统层面上，不过是安全意识差导致的。而归根究底，其实还是做产品的时候，究竟是有什么作为根本驱动的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;随着 HTML 5 的标准的提出、响应式布局的成熟、许多针对移动优化的网页架构的开源项目的推出，手机浏览器能做的已经远不是以前可以想象的了，它几乎可以做任何事情。所以许多概念认为手机上的浏览器应该起到主要作用，Web App 在手机上的一个用这几年成为了一个热点。Ubuntu Mobile 的手机 ROM 更是以 Web App 作为主要功能，也让人体验到了这种想法的可能性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="安全" scheme="http://blog.heckpsi.com/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="App" scheme="http://blog.heckpsi.com/tags/App/"/>
    
      <category term="Hybrid" scheme="http://blog.heckpsi.com/tags/Hybrid/"/>
    
  </entry>
  
  <entry>
    <title>为何有应用宁可使用一套奇丑无比的界面，也不愿意跟进 Material Design？</title>
    <link href="http://blog.heckpsi.com/2015/03/29/why-material-design-pushes-difficult-in-china/"/>
    <id>http://blog.heckpsi.com/2015/03/29/why-material-design-pushes-difficult-in-china/</id>
    <published>2015-03-29T04:51:12.000Z</published>
    <updated>2016-05-15T03:20:12.000Z</updated>
    
    <content type="html">&lt;p&gt;这个问题其实是相当复杂的。从 Google 的发布会提出 Material Design 的设计规范以来，许多人都为 Material Design 所惊艳到。但事实上，大多数应用都无法很好及时跟进这一设计标准。这一点，尤其是在国内，显得更为的突出。我自己实践 Material Design 也有了一段时间，我觉得至少有三点原因。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;一、Material-Design-设计语言非常复杂，学习成本高，实现难度大。&quot;&gt;&lt;a href=&quot;#一、Material-Design-设计语言非常复杂，学习成本高，实现难度大。&quot; class=&quot;headerlink&quot; title=&quot;一、Material Design 设计语言非常复杂，学习成本高，实现难度大。&quot;&gt;&lt;/a&gt;一、Material Design 设计语言非常复杂，学习成本高，实现难度大。&lt;/h3&gt;&lt;p&gt;于 Material Design 复杂的设计语言相比，我敢说，学习难度比你跟进 iOS 的平面化的开发标准要困难十倍以上。Material Design 并不是使用 Google 提供的这些控件、图片设计出来的东西就是 Material Design 了。Material Design 的核心是一个高度抽象化的设计逻辑是对真实事物的逻辑层面的模拟，比起 iOS 以前那种单纯视觉上的拟物比起来，这是一种非常高层次的拟物概念，理解起来确实比较费事。&lt;/p&gt;
&lt;p&gt;举个例子来说，&lt;br&gt;当你有一个如同这样的页面布局。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.heckpsi.com/1003_1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样的页面布局下，当用户手指从下向上滚动屏幕的时候，我们先想象一下，这个布局应该如何跟随调整？通常情况下，我们会选择整页内容一起向上滚动。但实际上，这种方法并不是很正确。&lt;/p&gt;
&lt;p&gt;我们仔细观察这个布局，去掉状态栏，这个页面也有五个不同的“色块”组成的独立元素。他们分别是 用来选择操作的顶栏Toolbar，然后是 Featured Image，然后是 Topic，下方的 Detail，和一个标记状态的 Button。&lt;/p&gt;
&lt;p&gt;然后我们把这五个东西想象成五张真实存在的纸片，他们堆叠在一起。&lt;/p&gt;
&lt;p&gt;当你移动下面的 Detail 页的时候，其他元素其实应该有着不同的相对运动才对，而不是整体上移。比如 Featured Image 不动，下面的纸片从它上方运动覆盖移动过去，而推到顶时，Topic 页可以成为这页的标题，而下方的 Detail 也继续移动。这个设计来自于 Google I/O 2014 App 的设计。（此应用源代码可以到 &lt;a href=&quot;https://github.com/romainguy/google-io-2014&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; 下载&lt;/p&gt;
&lt;p&gt;这样的设计逻辑并不是来自于哪个现成的模板，而是针对你应用的不同布局不同考虑的，甚至是像素级的细节考虑，对设计者的要求很高，对程序实现的要求同样也很高。这是 Material Design 中许多细腻的 “激动人心的细节” 背后深藏的设计逻辑。更何况，我只能说，我举的这个例子也是 Material Design 复杂语言的一个很小的部分而已。&lt;/p&gt;
&lt;p&gt;Material Design 的设备兼容性是比较差的，当然比起当年 Holo 设计在 Android 2.x 上的完全不兼容不同，Material Design 是可以做到 4.x 的半兼容的。所谓半兼容，指的是使用 Google 提供的控件和兼容包，可以基本显示。但是比如状态栏的颜色的设置、各个控件的 elevation 阴影、selectableBackground 的按钮响应动画都会失效。&lt;/p&gt;
&lt;h3 id=&quot;二、Material-Design-的设备兼容性不够好。&quot;&gt;&lt;a href=&quot;#二、Material-Design-的设备兼容性不够好。&quot; class=&quot;headerlink&quot; title=&quot;二、Material Design 的设备兼容性不够好。&quot;&gt;&lt;/a&gt;二、Material Design 的设备兼容性不够好。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://cdn.heckpsi.com/1003_3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;（如上图这样的 Elevation 效果，在 Android 4.x 上会被直接“压扁”显示）&lt;/p&gt;
&lt;p&gt;而与 Android 2.x 更是完全不兼容了。开发者即使愿意忍痛让 4.x 用户看一个不完整的设计，也不能满足 2.x 用户的兼容需求。&lt;/p&gt;
&lt;p&gt;虽然这种苛刻的兼容需求对于大多数应用来说都不是很有关系，但是比如像 QQ（最低兼容至 Android 1.6）、微信（最低兼容至 Android 2.2）这样的应用，他们的市场的广度迫使他们不能尝试这样的事情，毕竟在中国，使用 Android 2.x 的手机的用户依然还是有相当一部分的。&lt;/p&gt;
&lt;p&gt;在这样的背景下，Material Design 在 QQ、微信、淘宝 这样的应用上，短时间是不可能实现的。他们处于兼容性的考量，需要使用系统最基础的控件以及利用这些控件组合的自定义控件，而不能去使用高版本才拥有的特性。这样的应用又卡、又慢、又丑也是有一定客观原因的。&lt;/p&gt;
&lt;h3 id=&quot;三、Material-Design-的一些其他劣势。&quot;&gt;&lt;a href=&quot;#三、Material-Design-的一些其他劣势。&quot; class=&quot;headerlink&quot; title=&quot;三、Material Design 的一些其他劣势。&quot;&gt;&lt;/a&gt;三、Material Design 的一些其他劣势。&lt;/h3&gt;&lt;p&gt;当然上述的两点原因并不是一些大厂商不使用 Material Design，宁可用自己设计的极丑无比的界面的唯一原因。还有一些细碎的原因，也是左右这个设计普及受阻的砝码。比如像阿里、腾讯、百度这样的企业，他们并不是设计驱动的，而是商业驱动的。如果跟进 Material Design，势必会影响他们的一些商业利益。&lt;/p&gt;
&lt;p&gt;比如说，页面的逻辑会受到牵制，他们再也无法放一些活动、广告的按钮放在用户最易点击的地方，颜色也不能总是整片整片的大红大绿。一些页面的访问频次会随着逻辑层级变深而降低。这也是当时 微信 5.2 测试版刚开始试图 Holo 化又叫停的重要原因。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.heckpsi.com/1003_4.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;（微信 5.2 内测版截图，图源网络）&lt;br&gt;更有一些想法是希望 Android 和 iOS 能拥有一样的 UI，使得用户降低学习成本，更快上手，更好赚钱。所以在 Android 上出现底栏两层皮、三层皮什么的就是出于这样的想法。&lt;/p&gt;
&lt;p&gt;在目前中国市场上，用户对设计的品味还处于一个比较初级的阶段，对设计几乎没有要求。而你就算有要求，你为了使用应用也愿意去做这样的妥协。开发者做跟进花费的代价远小于他们的收益。恐怕这是许多公司宁可设计一套奇丑无比的 UI，也不愿意跟进 Material Design 的核心原因。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这个问题其实是相当复杂的。从 Google 的发布会提出 Material Design 的设计规范以来，许多人都为 Material Design 所惊艳到。但事实上，大多数应用都无法很好及时跟进这一设计标准。这一点，尤其是在国内，显得更为的突出。我自己实践 Material Design 也有了一段时间，我觉得至少有三点原因。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.heckpsi.com/tags/Android/"/>
    
      <category term="Google" scheme="http://blog.heckpsi.com/tags/Google/"/>
    
      <category term="设计" scheme="http://blog.heckpsi.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>脑洞打开说联觉</title>
    <link href="http://blog.heckpsi.com/2015/03/28/synesthesia/"/>
    <id>http://blog.heckpsi.com/2015/03/28/synesthesia/</id>
    <published>2015-03-28T12:42:09.000Z</published>
    <updated>2016-04-22T06:52:40.000Z</updated>
    
    <content type="html">&lt;p&gt;在日本小说家野村美月的轻小说《文学少女》中天野远子拥有“尝书”的奇特能力。在阅读文字的过程中可以感受到书的美味。也就是说，远子学姐的视觉和她的味觉产生某种内部的关联，使得她视觉上的感知能自发地去刺激味觉的感知。这样子的体验看似非常的荒诞，却也十分的有趣，但非更有意思的是，现实生活中还确实存在这样的情况。&lt;/p&gt;
&lt;p&gt;魅族 MX4 Pro 的发布会上魅族将其自身的音频解决方案包装命名为 Retina Sound —— 视网膜的声音… 考虑到魅族这样的大企业也不至于会去犯英语不过四级的错误，我们或许完全可以从中挖掘出更深层的秘密。黄章凭借 mp3 产品当年创造一代奇迹的真正原因是不是黄章本身拥有某些我们没有的能力。或许他能像远子学姐用视觉刺激味觉一样，用听觉去刺激视觉呢？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;黄章是不是有这样的能力我不知道，但是现实中有这样类似能力的人倒是有不少。心理学上通常把这种现象叫做联觉认知现象(Synesthesia，有时也译作通感)。&lt;/p&gt;
&lt;p&gt;联觉是一种特殊的认知现象。联觉人通常会因为一种感官刺激或认知途径自发且非主动地引起另一种感知或认识。比如当听到某一个声音的时候，会感觉出某一种颜色；看到某一些文字，会感受到某一种味觉；更复杂的还有当看到某个数字的时候，会感觉具体出现在某一个位置等等。联觉通常是无意识的，联觉者一般会认为这样的联系非常的正常而不会刻意地注意到这点。根据估算，人群中平均每23个人会出现一个联觉人。而概率更小的甚至有多联觉人，比如看到某个数字会感觉到某种颜色，同时还能出现在空间中的某一个位置。&lt;/p&gt;
&lt;p&gt;对于联觉上的认识不断深入，尤其是本世纪以来的一些研究发展使得神经科学家已经逐渐揭示了联觉现象背后的机理。枯燥的研究论文大煞联觉神秘风景的同时，也带来了不少有意义的应用。比如，我们甚至可以通过一些手段去人工创造一些类似“联觉现象”的产生。比如当你看到某个颜色的时候我们特意去发出某个声音或者去触碰身体的某个部位，通过长期对大脑的不断学习之后，也会产生这样子的联觉的认知。这种认知的产生也可以更有利地去训练一些听力、视力障碍的一些患者去获得这些感知的体验。&lt;/p&gt;
&lt;p&gt;通常而言，联觉收到感性化的影响是比较大的，而对于许多联觉人来说，这种体验基本是中性的，甚至有时是比较愉悦的。我们回到我们一开始举的几个例子上。如果黄章真的有这样联觉的认知，把自己的音频产品命名为“视网膜声音”也就不再见怪了。相反的，这显示出了其声音的清晰度，如视网膜看到东西一般“可视化的音频”。黄章使用音频设备播放音乐的时候应该能比常人拥有更深刻的体验。而天野远子那样能将书中的文字转化成味觉的，能使她在阅读上有更加感性的认知，也非常有意思。&lt;/p&gt;
&lt;p&gt;这种有意思的体验常常被用于艺术创作之中。比如1940年迪斯尼创作的电影《幻想曲(Fantasia)》中的许多镜头声音的变化会随着画面颜色的变化一同进行。联觉被广泛运用于文学、音乐、绘画、电影、动画之中，并且许多艺术家也是联觉人，联觉给他们带来的体验成为了他们创作过程的源泉。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在日本小说家野村美月的轻小说《文学少女》中天野远子拥有“尝书”的奇特能力。在阅读文字的过程中可以感受到书的美味。也就是说，远子学姐的视觉和她的味觉产生某种内部的关联，使得她视觉上的感知能自发地去刺激味觉的感知。这样子的体验看似非常的荒诞，却也十分的有趣，但非更有意思的是，现实生活中还确实存在这样的情况。&lt;/p&gt;
&lt;p&gt;魅族 MX4 Pro 的发布会上魅族将其自身的音频解决方案包装命名为 Retina Sound —— 视网膜的声音… 考虑到魅族这样的大企业也不至于会去犯英语不过四级的错误，我们或许完全可以从中挖掘出更深层的秘密。黄章凭借 mp3 产品当年创造一代奇迹的真正原因是不是黄章本身拥有某些我们没有的能力。或许他能像远子学姐用视觉刺激味觉一样，用听觉去刺激视觉呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="科普" scheme="http://blog.heckpsi.com/tags/%E7%A7%91%E6%99%AE/"/>
    
      <category term="魅族" scheme="http://blog.heckpsi.com/tags/%E9%AD%85%E6%97%8F/"/>
    
  </entry>
  
  <entry>
    <title>第一封致用户的道歉信</title>
    <link href="http://blog.heckpsi.com/2015/03/27/apology-to-visitors/"/>
    <id>http://blog.heckpsi.com/2015/03/27/apology-to-visitors/</id>
    <published>2015-03-27T10:25:28.000Z</published>
    <updated>2016-04-22T06:50:34.000Z</updated>
    
    <content type="html">&lt;p&gt;HeckPsi 对所有访问我们网站的用户道歉。&lt;/p&gt;
&lt;p&gt;在今天上午 HeckPsi 作为“帮凶”对 GitHub 的两个项目 greatfire 和 cn-nytimes 进行了 DDoS 攻击。&lt;/p&gt;
&lt;p&gt;对此，我们深表遗憾并且必须致以我们最为诚挚的道歉。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;造成这样的问题，是由于我们网页内嵌了 百度统计 的代码以统计我们的页面访问量。而今天，百度统计的代码被恶意内嵌了进行 DDoS 攻击的代码。目前暂时不知道这些代码是由百度嵌入的还是由政府要求嵌入的亦或者是黑客攻击百度嵌入的。但其实际造成了严重的影响，造成了严重的后果。&lt;/p&gt;
&lt;p&gt;HeckPsi 一向支持开源软件事业，开源软件对我们很重要。我们的服务中所使用的部分软件也是根据开放源代码许可提供的。HeckPsi 绝对不会有意去攻击 GitHub 这样的网站。但是事实上，我们无意中参与了这样的攻击，我们也必须要为如此愚蠢的行为负责。&lt;/p&gt;
&lt;p&gt;由于之前百度的种种恶迹，我们在选用第三方服务时已经尽量避开了百度的服务。在过去的几个月内，我们也逐渐将存放于百度云存储的、百度静态库CDN的一些服务出于安全原因进行了几次迁移，但忘记了网页统计使用的依然是百度的服务，没有进行及时的变更，才造成了今天的问题。&lt;/p&gt;
&lt;p&gt;目前，HeckPsi 已经停用了全部百度统计的代码，并强制更新了所有页面缓存。临时使用了 Google Analytics 对我们的网站进行统计。同时，我们会在接下来几周内深度检查网页中的各种代码，以避免使用百度的全部服务。同时，我们将在未来使用第三方服务的时候，严格考察第三方服务的可靠性。&lt;/p&gt;
&lt;p&gt;对此，给各位造成的影响，表示最大程度的道歉。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;HeckPsi 对所有访问我们网站的用户道歉。&lt;/p&gt;
&lt;p&gt;在今天上午 HeckPsi 作为“帮凶”对 GitHub 的两个项目 greatfire 和 cn-nytimes 进行了 DDoS 攻击。&lt;/p&gt;
&lt;p&gt;对此，我们深表遗憾并且必须致以我们最为诚挚的道歉。&lt;/p&gt;
    
    </summary>
    
    
      <category term="站务" scheme="http://blog.heckpsi.com/tags/%E7%AB%99%E5%8A%A1/"/>
    
      <category term="百度" scheme="http://blog.heckpsi.com/tags/%E7%99%BE%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>Nexus5 镜头进灰修复记</title>
    <link href="http://blog.heckpsi.com/2015/02/25/fix-nexus-5-lens/"/>
    <id>http://blog.heckpsi.com/2015/02/25/fix-nexus-5-lens/</id>
    <published>2015-02-25T10:16:02.000Z</published>
    <updated>2016-05-15T03:20:12.000Z</updated>
    
    <content type="html">&lt;p&gt;手上这台Nexus 5已经用了快要一年的时间了。大概三个月起摄像头画质出现了非常严重的问题。记得以前我们都说一个笑话：“Nexus 4的摄像头，哈哈哈哈哈哈哈哈”。 可是Nexus 5的摄像头还成啊，怎么突然画质变得这么糟糕呢。而且不是一般地糟糕，糟糕到几乎不能看的水平。我给大家上个图，大家感受一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.heckpsi.com/974_1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;就算是前置摄像头也拍不成这雾蒙蒙的一片啊！对比度和锐度严重下降，画面糊成一团。如果画面内有光源，光源甚至还能拉出好几条线出来。一开始还没注意，越用越不对劲。显然不是软件上的问题，这一定是摄像头哪里出了事啊！&lt;/p&gt;
&lt;p&gt;于是默默看了一眼摄像头，保护玻璃上全部都是灰！理论上像这种一体式的手机进灰比起以前可开后盖的难度高了不少，进一两粒也可以理解，也不会影响画质，但是这大片大片的进灰就不对了。我打开闪光灯给大家看一下进灰有多严重。。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.heckpsi.com/974_2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;显然地，为了正常使用这块摄像头，必须要进行灰尘清理了。据之前 iFixit 做的 &lt;a href=&quot;https://www.ifixit.com/Teardown/Nexus+5+Teardown/19016&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;拆机评测&lt;/a&gt;，显示只要不换屏幕，Nexus 5 的维修难度是极易的。那么我们就开始拆机维修吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.heckpsi.com/974_3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我并没有用塑料片打开后盖，因为找不到那么薄的塑料片……于是我用吸盘吸起了一个卡扣，然后用指甲一点点打开了后盖。使用吸盘是一个非常好用的拆机技巧。用来拆一体式后盖设计的机器非常方便。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.heckpsi.com/974_4.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;让人非常高兴的是，Nexus 5 的 NFC 天线并没有使用“飞线”来连接，而是使用了一组弹簧触片。这使得打开后盖后安装回去不需要用电烙铁焊回去，还是比较方便的。&lt;/p&gt;
&lt;p&gt;之前有人说用电吹风热档可以加热保护玻璃膨胀，然后直接从里面顶出来。答案是：不可以。事实上这样操作加热到 70°C 左右的时候玻璃依然不会掉出来，再加热上去可能会损坏其它元件，还是别这么干了。&lt;/p&gt;
&lt;p&gt;打开后盖后发现了，Nexus 5的保护玻璃并没有安装在后盖上，并不像 锤子 T1 那样后盖一开摄像元件就暴露在外面。同时，Nexus 5 的保护玻璃也没有单独安装在摄像元件的周围那么复杂。实际上保护玻璃是和散热中间件连在了一起，所以要想把保护玻璃取下，需要拆掉上半部分的中间件。&lt;/p&gt;
&lt;p&gt;不过这时候出现了一个问题，中间件是被一个 Y字螺丝 固定住的，而并不像下方扬声器是用 十字螺丝 固定的。我手上没有Y字螺丝刀，显然拆起来还挺费劲。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.heckpsi.com/974_5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;不过发现我手上最小的 一字螺丝刀 正好能卡住这个 Y字螺丝的一条边，但转起来还是比较容易滑牙。一个比较方便的方法是按紧螺丝刀，然后旋转手机，就可以慢慢把螺丝卸下来。6个螺丝中有三个非常紧，而另外三个却很好拆，不知道是出于什么目的还是装配的问题弄成这样的。&lt;/p&gt;
&lt;p&gt;拆下所有螺丝后，用螺丝刀伸到中间件的背后，往外轻轻撬动，把卡扣撬开，中间件就连着保护玻璃一起下来了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.heckpsi.com/974_6.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;拆下后用 气吹 分别清理摄像头元件上的细灰尘和表面玻璃背后的灰尘。清理完毕后安装回去。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.heckpsi.com/974_7.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.heckpsi.com/974_8.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;清理完后表面只能看到一些玻璃的划痕了，毕竟 Nexus 5 摄像头凸在外面，划痕不可避。把螺丝拧上背盖安装上开机完工。&lt;/p&gt;
&lt;p&gt;最后我们来看看清理灰尘前后拍出照片的对比吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.heckpsi.com/974_1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.heckpsi.com/974_9.jpg&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;p&gt;画质简直感人 QuQ&lt;/p&gt;
&lt;p&gt;至此，Nexus 5的摄像头恢复了正常的使用。Nexus 5的拆解还是比较容易的，但是这种易拆解的结构也确实导致了灰尘很容易进入，如果有遇到类似问题的同学，也不妨动动手，把这不能忍受的问题解决了吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;手上这台Nexus 5已经用了快要一年的时间了。大概三个月起摄像头画质出现了非常严重的问题。记得以前我们都说一个笑话：“Nexus 4的摄像头，哈哈哈哈哈哈哈哈”。 可是Nexus 5的摄像头还成啊，怎么突然画质变得这么糟糕呢。而且不是一般地糟糕，糟糕到几乎不能看的水平。我给大家上个图，大家感受一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.heckpsi.com/974_1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nexus" scheme="http://blog.heckpsi.com/tags/Nexus/"/>
    
      <category term="硬件" scheme="http://blog.heckpsi.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
      <category term="维修" scheme="http://blog.heckpsi.com/tags/%E7%BB%B4%E4%BF%AE/"/>
    
  </entry>
  
</feed>
